************* Module api.admin
resync\api\admin.py:17:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\admin.py:18:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\admin.py:19:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\admin.py:100:8: C0415: Import outside toplevel (pathlib.Path) (import-outside-toplevel)
resync\api\admin.py:102:8: C0415: Import outside toplevel (fastapi.templating.Jinja2Templates) (import-outside-toplevel)
resync\api\admin.py:108:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:174:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:122:4: W0613: Unused argument 'request' (unused-argument)
resync\api\admin.py:210:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:252:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:188:4: W0613: Unused argument 'request' (unused-argument)
resync\api\admin.py:282:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:268:4: W0613: Unused argument 'request' (unused-argument)
resync\api\admin.py:304:8: C0415: Import outside toplevel (resync.core.teams_integration.TeamsNotification) (import-outside-toplevel)
resync\api\admin.py:333:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:295:4: W0613: Unused argument 'request' (unused-argument)
resync\api\admin.py:361:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\admin.py:383:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\admin.py:348:4: W0613: Unused argument 'request' (unused-argument)
resync\api\admin.py:17:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party import "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\api\admin.py:18:0: C0411: third party import "resync_new.core.fastapi_di.get_teams_integration" should be placed before first party import "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\api\admin.py:19:0: C0411: third party import "resync_new.utils.interfaces.ITWSClient" should be placed before first party import "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\api\admin.py:21:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.agents
resync\api\agents.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\agents.py:6:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\agents.py:39:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\agents.py:40:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\agents.py:20:4: W0613: Unused argument 'request' (unused-argument)
resync\api\agents.py:56:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\agents.py:75:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\agents.py:76:8: W0707: Consider explicitly re-raising using 'raise NotFoundError(f"Agent with ID '{agent_id}' not found.") from e' (raise-missing-from)
resync\api\agents.py:47:4: W0613: Unused argument 'request' (unused-argument)
resync\api\agents.py:6:0: C0411: third party import "resync_new.core.fastapi_di.get_agent_manager" should be placed before first party import "resync.core.exceptions_enhanced.NotFoundError"  (wrong-import-order)
resync\api\agents.py:8:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.audit
resync\api\audit.py:17:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\audit.py:18:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\audit.py:72:0: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\audit.py:72:0: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\api\audit.py:121:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\audit.py:528:8: C0415: Import outside toplevel (uuid) (import-outside-toplevel)
resync\api\audit.py:17:0: C0411: third party import "resync_new.core.fastapi_di.get_audit_queue" should be placed before first party imports "resync.core.idempotency.manager.IdempotencyManager", "resync.core.logger.log_audit_event"  (wrong-import-order)
resync\api\audit.py:18:0: C0411: third party import "resync_new.utils.interfaces.IAuditQueue" should be placed before first party imports "resync.core.idempotency.manager.IdempotencyManager", "resync.core.logger.log_audit_event"  (wrong-import-order)
resync\api\audit.py:20:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.auth
resync\api\auth.py:27:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\auth.py:28:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\auth.py:48:8: C0209: Formatting a regular string which could be an f-string (consider-using-f-string)
resync\api\auth.py:64:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\auth.py:272:8: W0707: Consider explicitly re-raising using 'except Exception as exc' and 'raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials', headers={'WWW-Authenticate': 'Bearer'}) from exc' (raise-missing-from)
resync\api\auth.py:20:0: W0611: Unused import os (unused-import)
************* Module api.auth_secure
resync\api\auth_secure.py:27:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\auth_secure.py:28:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\auth_secure.py:48:8: C0209: Formatting a regular string which could be an f-string (consider-using-f-string)
resync\api\auth_secure.py:64:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\auth_secure.py:272:8: W0707: Consider explicitly re-raising using 'except Exception as exc' and 'raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials', headers={'WWW-Authenticate': 'Bearer'}) from exc' (raise-missing-from)
resync\api\auth_secure.py:20:0: W0611: Unused import os (unused-import)
************* Module api.cache
resync\api\cache.py:16:4: W0622: Redefining built-in 'ConnectionError' (redefined-builtin)
resync\api\cache.py:16:4: W0622: Redefining built-in 'TimeoutError' (redefined-builtin)
resync\api\cache.py:30:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\cache.py:31:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\cache.py:32:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\cache.py:46:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\cache.py:51:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\cache.py:94:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:58:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\cache.py:123:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\cache.py:121:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:124:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:153:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\cache.py:149:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:151:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:154:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:173:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\cache.py:171:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:174:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:191:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\cache.py:189:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:192:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:214:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\cache.py:210:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:215:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:257:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:301:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:310:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:339:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:344:8: W0603: Using the global statement (global-statement)
resync\api\cache.py:385:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:396:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:320:4: W0613: Unused argument 'request' (unused-argument)
resync\api\cache.py:417:4: W0603: Using the global statement (global-statement)
resync\api\cache.py:431:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\cache.py:408:4: W0613: Unused argument 'request' (unused-argument)
resync\api\cache.py:30:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party import "resync.core.rate_limiter.authenticated_rate_limit"  (wrong-import-order)
resync\api\cache.py:31:0: C0411: third party import "resync_new.core.fastapi_di.get_tws_client" should be placed before first party import "resync.core.rate_limiter.authenticated_rate_limit"  (wrong-import-order)
resync\api\cache.py:32:0: C0411: third party import "resync_new.utils.interfaces.ITWSClient" should be placed before first party import "resync.core.rate_limiter.authenticated_rate_limit"  (wrong-import-order)
resync\api\cache.py:27:0: C0412: Imports from package redis are not grouped (ungrouped-imports)
************* Module api.chat
resync\api\chat.py:19:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\chat.py:20:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\chat.py:28:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\chat.py:47:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\api\chat.py:168:0: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\chat.py:168:0: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\api\chat.py:19:0: C0411: third party import "resync_new.core.fastapi_di.get_agent_manager" should be placed before first party imports "resync.core.ia_auditor.analyze_and_flag_memories", "resync.core.llm_wrapper.optimized_llm"  (wrong-import-order)
resync\api\chat.py:20:0: C0411: third party import "resync_new.utils.exceptions.AgentExecutionError" should be placed before first party imports "resync.core.ia_auditor.analyze_and_flag_memories", "resync.core.llm_wrapper.optimized_llm"  (wrong-import-order)
resync\api\chat.py:28:0: C0411: third party import "resync_new.utils.interfaces.IAgentManager" should be placed before first party imports "resync.core.ia_auditor.analyze_and_flag_memories", "resync.core.llm_wrapper.optimized_llm"  (wrong-import-order)
resync\api\chat.py:30:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.circuit_breaker_metrics
resync\api\circuit_breaker_metrics.py:14:0: E0401: Unable to import 'resync_new.core.monitoring.circuit_breaker' (import-error)
resync\api\circuit_breaker_metrics.py:18:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\circuit_breaker_metrics.py:111:15: W0212: Access to a protected member _lock of a client class (protected-access)
resync\api\circuit_breaker_metrics.py:112:14: W0212: Access to a protected member _set_state of a client class (protected-access)
resync\api\circuit_breaker_metrics.py:157:15: W0212: Access to a protected member _lock of a client class (protected-access)
resync\api\circuit_breaker_metrics.py:212:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Proactive health check failed: {str(e)}') from e' (raise-missing-from)
resync\api\circuit_breaker_metrics.py:246:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Health analysis failed: {str(e)}') from e' (raise-missing-from)
resync\api\circuit_breaker_metrics.py:14:0: C0411: third party import "resync_new.core.monitoring.circuit_breaker.adaptive_llm_api_breaker" should be placed before first party import "resync.core.health_service.get_health_check_service"  (wrong-import-order)
resync\api\circuit_breaker_metrics.py:18:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party import "resync.core.health_service.get_health_check_service"  (wrong-import-order)
************* Module api.connection_pool_monitoring
resync\api\connection_pool_monitoring.py:280:0: C0301: Line too long (118/100) (line-too-long)
resync\api\connection_pool_monitoring.py:284:0: C0301: Line too long (116/100) (line-too-long)
resync\api\connection_pool_monitoring.py:292:0: C0301: Line too long (116/100) (line-too-long)
resync\api\connection_pool_monitoring.py:296:0: C0301: Line too long (111/100) (line-too-long)
resync\api\connection_pool_monitoring.py:310:0: C0301: Line too long (101/100) (line-too-long)
resync\api\connection_pool_monitoring.py:13:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\connection_pool_monitoring.py:15:0: E0401: Unable to import 'resync.core.pools.connection_pool_monitor' (import-error)
resync\api\connection_pool_monitoring.py:15:0: E0611: No name 'connection_pool_monitor' in module 'resync.core.pools' (no-name-in-module)
resync\api\connection_pool_monitoring.py:51:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to retrieve pool metrics: {str(e)}') from e' (raise-missing-from)
resync\api\connection_pool_monitoring.py:90:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to retrieve pool alerts: {str(e)}') from e' (raise-missing-from)
resync\api\connection_pool_monitoring.py:142:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to check pool health: {str(e)}') from e' (raise-missing-from)
resync\api\connection_pool_monitoring.py:168:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to retrieve monitoring status: {str(e)}') from e' (raise-missing-from)
resync\api\connection_pool_monitoring.py:186:14: W0212: Access to a protected member _update_metrics of a client class (protected-access)
resync\api\connection_pool_monitoring.py:187:14: W0212: Access to a protected member _perform_health_checks of a client class (protected-access)
resync\api\connection_pool_monitoring.py:188:14: W0212: Access to a protected member _check_alerts of a client class (protected-access)
resync\api\connection_pool_monitoring.py:211:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to perform health check: {str(e)}') from e' (raise-missing-from)
************* Module api.cors_monitoring
resync\api\cors_monitoring.py:11:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\cors_monitoring.py:30:25: W0613: Unused argument 'request' (unused-argument)
resync\api\cors_monitoring.py:43:26: W0613: Unused argument 'request' (unused-argument)
resync\api\cors_monitoring.py:116:4: W0613: Unused argument 'limit' (unused-argument)
resync\api\cors_monitoring.py:117:4: W0613: Unused argument 'hours' (unused-argument)
************* Module api.dependencies
resync\api\dependencies.py:190:5: W0511: TODO: Implementar autenticaþÒo real (fixme)
resync\api\dependencies.py:235:5: W0511: TODO: Implementar verificaþÒo de rate limit (fixme)
resync\api\dependencies.py:11:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\dependencies.py:16:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\dependencies.py:48:8: W0707: Consider explicitly re-raising using 'raise ServiceUnavailableError('Idempotency service is not available.') from e' (raise-missing-from)
resync\api\dependencies.py:89:4: C0415: Import outside toplevel (re) (import-outside-toplevel)
resync\api\dependencies.py:116:4: W0603: Using the global statement (global-statement)
resync\api\dependencies.py:125:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\dependencies.py:158:4: C0415: Import outside toplevel (resync.core.context.get_correlation_id) (import-outside-toplevel)
resync\api\dependencies.py:167:4: C0415: Import outside toplevel (uuid) (import-outside-toplevel)
resync\api\dependencies.py:143:4: W0613: Unused argument 'request' (unused-argument)
resync\api\dependencies.py:226:27: W0613: Unused argument 'request' (unused-argument)
resync\api\dependencies.py:11:0: C0411: third party import "resync_new.utils.exceptions.AuthenticationError" should be placed before first party imports "resync.core.container.app_container", "resync.core.idempotency.manager.IdempotencyManager"  (wrong-import-order)
resync\api\dependencies.py:16:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party imports "resync.core.container.app_container", "resync.core.idempotency.manager.IdempotencyManager"  (wrong-import-order)
************* Module api.endpoints
resync\api\endpoints.py:551:0: C0301: Line too long (123/100) (line-too-long)
resync\api\endpoints.py:1233:0: C0301: Line too long (132/100) (line-too-long)
resync\api\endpoints.py:1255:0: C0301: Line too long (113/100) (line-too-long)
resync\api\endpoints.py:1:0: C0302: Too many lines in module (1289/1000) (too-many-lines)
resync\api\endpoints.py:33:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\endpoints.py:61:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\endpoints.py:62:0: E0401: Unable to import 'resync_new.core.monitoring.metrics' (import-error)
resync\api\endpoints.py:63:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\endpoints.py:69:4: C0415: Import outside toplevel (resync.core.alerting.alerting_system) (import-outside-toplevel)
resync\api\endpoints.py:89:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:93:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:97:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:101:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:105:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:109:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:116:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:123:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:136:24: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:158:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:169:0: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\endpoints.py:169:24: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:176:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:256:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS workstation statuses retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:234:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:235:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:281:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS job statuses retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:262:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:263:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:307:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS job details retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:287:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:289:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:333:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS job history retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:313:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:315:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:359:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS job log retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:339:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:341:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:384:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS plan details retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:365:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:366:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:412:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS job dependencies retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:390:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:392:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:437:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS resource usage retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:418:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:419:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:465:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS event log retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:443:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:447:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:493:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS performance metrics retrieval') from e' (raise-missing-from)
resync\api\endpoints.py:471:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:472:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:499:19: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:565:8: W0707: Consider explicitly re-raising using 'raise handle_api_error(e, 'TWS health check') from e' (raise-missing-from)
resync\api\endpoints.py:507:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:511:4: W0613: Unused argument 'tws_client' (unused-argument)
resync\api\endpoints.py:569:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:633:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\endpoints.py:654:16: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:663:24: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:676:4: C0415: Import outside toplevel (resync.core.encryption_service.encryption_service) (import-outside-toplevel)
resync\api\endpoints.py:679:4: C0415: Import outside toplevel (resync.core.logger.log_with_correlation) (import-outside-toplevel)
resync\api\endpoints.py:673:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:703:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:710:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:721:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:734:4: C0415: Import outside toplevel (os) (import-outside-toplevel)
resync\api\endpoints.py:732:25: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:780:21: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:925:4: W0621: Redefining name 'Response' from outer scope (line 30) (redefined-outer-name)
resync\api\endpoints.py:909:4: C0415: Import outside toplevel (resync.api.auth.ACCESS_TOKEN_EXPIRE_MINUTES, resync.api.auth.authenticate_admin, resync.api.auth.create_access_token) (import-outside-toplevel)
resync\api\endpoints.py:925:4: W0404: Reimport 'Response' (imported line 30) (reimported)
resync\api\endpoints.py:925:4: C0415: Import outside toplevel (fastapi.Response) (import-outside-toplevel)
resync\api\endpoints.py:904:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:979:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\endpoints.py:980:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Failed to optimize LLM query: {str(e)}') from e' (raise-missing-from)
resync\api\endpoints.py:954:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:987:0: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\endpoints.py:994:26: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1009:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1044:8: W0621: Redefining name 'status' from outer scope (line 21) (redefined-outer-name)
resync\api\endpoints.py:1023:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1061:24: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1068:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:1078:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1096:28: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1120:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:1137:4: C0415: Import outside toplevel (resync.core.alerting.AlertRule, resync.core.alerting.AlertSeverity) (import-outside-toplevel)
resync\api\endpoints.py:1132:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1170:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\endpoints.py:1209:21: W0212: Access to a protected member _benchmark_tws_status of a client class (protected-access)
resync\api\endpoints.py:1222:21: W0212: Access to a protected member _benchmark_agent_creation of a client class (protected-access)
resync\api\endpoints.py:1236:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\endpoints.py:1237:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Benchmark execution failed: {str(e)}') from e' (raise-missing-from)
resync\api\endpoints.py:1179:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:1281:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\endpoints.py:1282:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=f'Getting benchmark results failed: {str(e)}') from e' (raise-missing-from)
resync\api\endpoints.py:1245:4: W0613: Unused argument 'request' (unused-argument)
resync\api\endpoints.py:33:0: C0411: third party import "resync_new.core.fastapi_di.get_agent_manager" should be placed before first party import "resync.core.agent_manager.AgentConfig"  (wrong-import-order)
resync\api\endpoints.py:34:0: C0411: third party import "starlette.responses.HTMLResponse" should be placed before first party import "resync.core.agent_manager.AgentConfig"  (wrong-import-order)
resync\api\endpoints.py:61:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party imports "resync.core.agent_manager.AgentConfig", "resync.api.circuit_breaker_metrics.router", "resync.api.utils.error_handlers.handle_api_error" (...) "resync.core.benchmarking.create_benchmark_runner", "resync.core.container.app_container", "resync.cqrs.queries.CheckTWSConnectionQuery"  (wrong-import-order)
resync\api\endpoints.py:62:0: C0411: third party import "resync_new.core.monitoring.metrics.runtime_metrics" should be placed before first party imports "resync.core.agent_manager.AgentConfig", "resync.api.circuit_breaker_metrics.router", "resync.api.utils.error_handlers.handle_api_error" (...) "resync.core.benchmarking.create_benchmark_runner", "resync.core.container.app_container", "resync.cqrs.queries.CheckTWSConnectionQuery"  (wrong-import-order)
resync\api\endpoints.py:63:0: C0411: third party import "resync_new.utils.interfaces.IAgentManager" should be placed before first party imports "resync.core.agent_manager.AgentConfig", "resync.api.circuit_breaker_metrics.router", "resync.api.utils.error_handlers.handle_api_error" (...) "resync.core.benchmarking.create_benchmark_runner", "resync.core.container.app_container", "resync.cqrs.queries.CheckTWSConnectionQuery"  (wrong-import-order)
resync\api\endpoints.py:36:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
resync\api\endpoints.py:61:0: C0412: Imports from package resync_new are not grouped (ungrouped-imports)
************* Module api.exception_handlers
resync\api\exception_handlers.py:306:0: C0301: Line too long (117/100) (line-too-long)
resync\api\exception_handlers.py:13:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\exception_handlers.py:23:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\exception_handlers.py:187:14: E1120: No value for argument 'title' in function call (no-value-for-parameter)
resync\api\exception_handlers.py:13:0: C0411: third party import "resync_new.utils.exceptions.AuthenticationError" should be placed before first party imports "resync.core.context.get_correlation_id", "resync.core.exceptions_enhanced.ResyncException"  (wrong-import-order)
resync\api\exception_handlers.py:23:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party imports "resync.core.context.get_correlation_id", "resync.core.exceptions_enhanced.ResyncException"  (wrong-import-order)
resync\api\exception_handlers.py:24:0: C0411: third party import "starlette.exceptions.HTTPException" should be placed before first party imports "resync.core.context.get_correlation_id", "resync.core.exceptions_enhanced.ResyncException"  (wrong-import-order)
resync\api\exception_handlers.py:26:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.gateway
resync\api\gateway.py:35:0: E0401: Unable to import 'resync_new.core.monitoring.circuit_breaker' (import-error)
resync\api\gateway.py:39:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\gateway.py:79:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
resync\api\gateway.py:104:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\api\gateway.py:145:19: E1101: Instance of 'RateLimitRule' has no '_get_client_ip' member (no-member)
resync\api\gateway.py:153:0: R0902: Too many instance attributes (19/7) (too-many-instance-attributes)
resync\api\gateway.py:319:4: R0914: Too many local variables (16/15) (too-many-locals)
resync\api\gateway.py:432:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\gateway.py:319:4: R0911: Too many return statements (9/6) (too-many-return-statements)
resync\api\gateway.py:595:12: C0415: Import outside toplevel (random) (import-outside-toplevel)
resync\api\gateway.py:558:8: W0613: Unused argument 'request' (unused-argument)
resync\api\gateway.py:702:12: W0707: Consider explicitly re-raising using 'except Exception as exc' and 'raise web.HTTPGatewayTimeout(text='Service timeout') from exc' (raise-missing-from)
resync\api\gateway.py:827:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\gateway.py:846:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\gateway.py:872:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\gateway.py:926:11: W0212: Access to a protected member _running of a client class (protected-access)
************* Module api.health
resync\api\health.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\health.py:9:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\api\health.py:16:0: E0401: Unable to import 'resync.core.health.health_service_consolidated' (import-error)
resync\api\health.py:16:0: E0611: No name 'health_service_consolidated' in module 'resync.core.health' (no-name-in-module)
resync\api\health.py:27:4: E0401: Unable to import 'resync_new.core.monitoring.metrics' (import-error)
resync\api\health.py:27:4: C0415: Import outside toplevel (resync_new.core.monitoring.metrics.runtime_metrics) (import-outside-toplevel)
resync\api\health.py:128:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:156:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:160:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\health.py:162:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:242:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:320:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:381:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:444:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:513:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:589:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\health.py:590:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\health.py:665:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\health.py:666:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module api.health_simplified
resync\api\health_simplified.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\api\health_simplified.py:23:0: E0401: Unable to import 'resync.core.health.health_service_manager_simplified' (import-error)
resync\api\health_simplified.py:23:0: E0611: No name 'health_service_manager_simplified' in module 'resync.core.health' (no-name-in-module)
resync\api\health_simplified.py:261:4: W0613: Unused argument 'history_hours' (unused-argument)
resync\api\health_simplified.py:508:8: C0415: Import outside toplevel (fastapi.Response) (import-outside-toplevel)
resync\api\health_simplified.py:567:11: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module api.operations
resync\api\operations.py:14:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\operations.py:198:8: C0415: Import outside toplevel (asyncio) (import-outside-toplevel)
resync\api\operations.py:290:8: C0415: Import outside toplevel (asyncio) (import-outside-toplevel)
resync\api\operations.py:14:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party import "resync.core.idempotency.manager.IdempotencyManager"  (wrong-import-order)
resync\api\operations.py:16:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module api.performance
resync\api\performance.py:43:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:44:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to generate performance report: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:81:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:82:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get cache metrics: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:110:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:111:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get cache recommendations: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:131:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:132:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get pool metrics: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:155:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:156:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get pool recommendations: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:178:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:179:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get resource stats: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:222:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:223:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to detect resource leaks: {str(e)}') from e' (raise-missing-from)
resync\api\performance.py:230:0: R0914: Too many local variables (17/15) (too-many-locals)
resync\api\performance.py:294:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\performance.py:295:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Failed to get performance health: {str(e)}') from e' (raise-missing-from)
************* Module api.rag_upload
resync\api\rag_upload.py:27:0: E0401: Unable to import 'resync_new.core.fastapi_di' (import-error)
resync\api\rag_upload.py:28:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\rag_upload.py:29:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\api\rag_upload.py:70:12: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=400, detail=str(ve)) from ve' (raise-missing-from)
resync\api\rag_upload.py:95:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\rag_upload.py:98:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module api.rfc_examples
resync\api\rfc_examples.py:16:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\rfc_examples.py:17:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\rfc_examples.py:55:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\rfc_examples.py:145:55: E1101: Instance of 'FieldInfo' has no 'lower' member (no-member)
resync\api\rfc_examples.py:183:11: E1123: Unexpected keyword argument 'base_path' in function call (unexpected-keyword-arg)
resync\api\rfc_examples.py:183:11: E1123: Unexpected keyword argument 'query_params' in function call (unexpected-keyword-arg)
resync\api\rfc_examples.py:135:4: W0613: Unused argument 'request' (unused-argument)
************* Module api.middleware.correlation_id
resync\api\middleware\correlation_id.py:77:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\correlation_id.py:82:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\correlation_id.py:92:12: C0415: Import outside toplevel (resync.core.context.set_correlation_id) (import-outside-toplevel)
resync\api\middleware\correlation_id.py:101:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\correlation_id.py:28:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module api.middleware.cors_config
resync\api\middleware\cors_config.py:48:0: C0301: Line too long (114/100) (line-too-long)
resync\api\middleware\cors_config.py:105:0: C0301: Line too long (108/100) (line-too-long)
resync\api\middleware\cors_config.py:131:0: C0301: Line too long (108/100) (line-too-long)
resync\api\middleware\cors_config.py:156:0: C0301: Line too long (108/100) (line-too-long)
resync\api\middleware\cors_config.py:231:0: C0301: Line too long (135/100) (line-too-long)
resync\api\middleware\cors_config.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\middleware\cors_config.py:166:12: W0707: Consider explicitly re-raising using 'raise ValueError(f"Invalid regex pattern '{v}': {e}") from e' (raise-missing-from)
resync\api\middleware\cors_config.py:186:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\cors_config.py:170:4: R0911: Too many return statements (10/6) (too-many-return-statements)
resync\api\middleware\cors_config.py:259:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module api.middleware.cors_middleware
resync\api\middleware\cors_middleware.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\middleware\cors_middleware.py:7:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\middleware\cors_middleware.py:20:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\api\middleware\cors_middleware.py:31:4: R0913: Too many arguments (9/5) (too-many-arguments)
resync\api\middleware\cors_middleware.py:159:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\cors_middleware.py:166:47: W0613: Unused argument 'method' (unused-argument)
resync\api\middleware\cors_middleware.py:245:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module api.middleware.cors_monitoring
resync\api\middleware\cors_monitoring.py:262:0: C0301: Line too long (118/100) (line-too-long)
resync\api\middleware\cors_monitoring.py:85:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\middleware\cors_monitoring.py:85:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\api\middleware\cors_monitoring.py:140:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\cors_monitoring.py:284:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\cors_monitoring.py:216:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module api.middleware.csp_middleware
resync\api\middleware\csp_middleware.py:96:8: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\middleware\csp_middleware.py:96:8: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\api\middleware\csp_middleware.py:207:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\csp_middleware.py:202:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\csp_middleware.py:192:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\csp_middleware.py:199:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\csp_middleware.py:203:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\csp_middleware.py:208:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\csp_middleware.py:17:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\middleware\csp_middleware.py:222:4: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\middleware\csp_middleware.py:222:4: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\api\middleware\csp_middleware.py:235:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\csp_middleware.py:9:0: C0411: third party import "starlette.middleware.base.BaseHTTPMiddleware" should be placed before first party import "resync.csp_validation.CSPValidationError"  (wrong-import-order)
************* Module api.middleware.csrf_protection
resync\api\middleware\csrf_protection.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\middleware\csrf_protection.py:5:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\middleware\csrf_protection.py:11:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module api.middleware.endpoint_utils
resync\api\middleware\endpoint_utils.py:15:0: E0401: Unable to import 'resync_new.core.monitoring.metrics' (import-error)
resync\api\middleware\endpoint_utils.py:113:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\endpoint_utils.py:116:16: C0415: Import outside toplevel (fastapi.HTTPException) (import-outside-toplevel)
resync\api\middleware\endpoint_utils.py:121:16: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=500, detail=error_response.message or str(e)) from e' (raise-missing-from)
resync\api\middleware\endpoint_utils.py:15:0: C0411: third party import "resync_new.core.monitoring.metrics.runtime_metrics" should be placed before first party imports "resync.core.logger.log_with_correlation", "resync.core.utils.error_utils.create_error_response_from_exception"  (wrong-import-order)
************* Module api.middleware.error_handler
resync\api\middleware\error_handler.py:47:0: C0301: Line too long (110/100) (line-too-long)
resync\api\middleware\error_handler.py:19:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\api\middleware\error_handler.py:73:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\error_handler.py:46:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:88:12: C0415: Import outside toplevel (resync_new.core.monitoring.metrics.runtime_metrics) (import-outside-toplevel)
resync\api\middleware\error_handler.py:93:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:84:14: W0613: Unused argument 'request' (unused-argument)
resync\api\middleware\error_handler.py:102:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:121:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:136:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:25:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\middleware\error_handler.py:165:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:183:4: C0415: Import outside toplevel (fastapi.HTTPException) (import-outside-toplevel)
resync\api\middleware\error_handler.py:199:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:239:4: W0621: Redefining name 'ResyncException' from outer scope (line 19) (redefined-outer-name)
resync\api\middleware\error_handler.py:238:4: C0415: Import outside toplevel (fastapi.HTTPException) (import-outside-toplevel)
resync\api\middleware\error_handler.py:239:4: W0404: Reimport 'ResyncException' (imported line 19) (reimported)
resync\api\middleware\error_handler.py:239:4: C0415: Import outside toplevel (resync.core.exceptions_enhanced.ResyncException) (import-outside-toplevel)
resync\api\middleware\error_handler.py:262:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:296:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\middleware\error_handler.py:19:0: C0411: third party import "resync_new.utils.exceptions.ResyncException" should be placed before first party import "resync.core.utils.error_utils.ErrorResponseBuilder"  (wrong-import-order)
resync\api\middleware\error_handler.py:20:0: C0411: third party import "starlette.middleware.base.BaseHTTPMiddleware" should be placed before first party import "resync.core.utils.error_utils.ErrorResponseBuilder"  (wrong-import-order)
************* Module api.middleware.idempotency
resync\api\middleware\idempotency.py:26:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\middleware\idempotency.py:41:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\middleware\idempotency.py:41:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\api\middleware\idempotency.py:275:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\idempotency.py:339:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\idempotency.py:382:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\middleware\idempotency.py:32:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\middleware\idempotency.py:414:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\api\middleware\idempotency.py:479:4: C0415: Import outside toplevel (uuid) (import-outside-toplevel)
resync\api\middleware\idempotency.py:494:4: C0415: Import outside toplevel (re) (import-outside-toplevel)
resync\api\middleware\idempotency.py:26:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party imports "resync.core.context.get_correlation_id", "resync.core.idempotency.IdempotencyManager"  (wrong-import-order)
resync\api\middleware\idempotency.py:27:0: C0411: third party import "starlette.middleware.base.BaseHTTPMiddleware" should be placed before first party imports "resync.core.context.get_correlation_id", "resync.core.idempotency.IdempotencyManager"  (wrong-import-order)
************* Module api.middleware.oauth2_middleware
resync\api\middleware\oauth2_middleware.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\middleware\oauth2_middleware.py:32:8: W0707: Consider explicitly re-raising using 'raise HTTPException(status_code=401, detail=f'Invalid token: {str(e)}') from e' (raise-missing-from)
************* Module api.models.health
resync\api\models\health.py:3:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
************* Module api.models.links
resync\api\models\links.py:94:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\api\models\links.py:94:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\api\models\links.py:100:8: W0622: Redefining built-in 'type' (redefined-builtin)
resync\api\models\links.py:162:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\models\links.py:162:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
************* Module api.security.models
resync\api\security\models.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\security\models.py:12:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\models.py:18:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\security\models.py:30:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\models.py:43:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\models.py:50:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\models.py:54:0: C0115: Missing class docstring (missing-class-docstring)
************* Module api.security.validations
resync\api\security\validations.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\api\security\validations.py:12:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\validations.py:14:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\security\validations.py:28:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\security\validations.py:29:15: E1101: Class 'EmailStr' has no 'validate' member; maybe '_validate'? (no-member)
resync\api\security\validations.py:41:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\validations.py:54:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\security\validations.py:58:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\validations.py:74:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\api\security\validations.py:78:0: C0115: Missing class docstring (missing-class-docstring)
resync\api\security\validations.py:87:4: C0116: Missing function or method docstring (missing-function-docstring)
************* Module api.utils.error_handlers
resync\api\utils\error_handlers.py:10:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\utils\error_handlers.py:10:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party import "resync.core.constants.ErrorMessages"  (wrong-import-order)
************* Module api.utils.stream_handler
resync\api\utils\stream_handler.py:12:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\api\utils\stream_handler.py:58:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\utils\stream_handler.py:122:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\utils\stream_handler.py:17:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module api.validation.auth
resync\api\validation\auth.py:172:0: C0301: Line too long (108/100) (line-too-long)
resync\api\validation\auth.py:185:0: C0301: Line too long (108/100) (line-too-long)
resync\api\validation\auth.py:197:0: C0301: Line too long (108/100) (line-too-long)
resync\api\validation\auth.py:254:0: C0301: Line too long (108/100) (line-too-long)
************* Module api.validation.chat
resync\api\validation\chat.py:356:0: C0301: Line too long (108/100) (line-too-long)
resync\api\validation\chat.py:64:12: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:68:15: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:74:16: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:167:12: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:183:14: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:187:16: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:249:16: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:253:13: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:257:14: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:297:16: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:301:13: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:305:14: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\chat.py:389:13: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\chat.py:428:16: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
************* Module api.validation.common
resync\api\validation\common.py:310:0: C0301: Line too long (114/100) (line-too-long)
resync\api\validation\common.py:33:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\api\validation\common.py:33:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\api\validation\common.py:94:0: E0102: class already defined line 11 (function-redefined)
resync\api\validation\common.py:94:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\api\validation\common.py:174:12: W0707: Consider explicitly re-raising using 'except ValueError as exc' and 'raise ValueError(f'Invalid UUID format: {uuid_str}') from exc' (raise-missing-from)
resync\api\validation\common.py:185:16: W0707: Consider explicitly re-raising using 'except ValueError as exc' and 'raise ValueError(f'Invalid UUID in list: {uuid_str}') from exc' (raise-missing-from)
resync\api\validation\common.py:189:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\api\validation\common.py:218:0: R0903: Too few public methods (0/2) (too-few-public-methods)
************* Module api.validation.config
resync\api\validation\config.py:418:21: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
resync\api\validation\config.py:423:20: C0415: Import outside toplevel (json) (import-outside-toplevel)
resync\api\validation\config.py:429:24: C0415: Import outside toplevel (toml) (import-outside-toplevel)
resync\api\validation\config.py:435:28: C0415: Import outside toplevel (yaml) (import-outside-toplevel)
resync\api\validation\config.py:447:16: W0707: Consider explicitly re-raising using 'raise ValueError(f'Failed to load validation config from {self.config_file}: {e}') from e' (raise-missing-from)
resync\api\validation\config.py:496:13: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
resync\api\validation\config.py:497:12: C0415: Import outside toplevel (json) (import-outside-toplevel)
resync\api\validation\config.py:577:4: W0603: Using the global statement (global-statement)
resync\api\validation\config.py:592:4: W0603: Using the global statement (global-statement)
************* Module api.validation.enhanced_security_fixed
resync\api\validation\enhanced_security_fixed.py:321:0: C0301: Line too long (101/100) (line-too-long)
resync\api\validation\enhanced_security_fixed.py:755:0: C0301: Line too long (101/100) (line-too-long)
resync\api\validation\enhanced_security_fixed.py:1:0: C0302: Too many lines in module (1031/1000) (too-many-lines)
resync\api\validation\enhanced_security_fixed.py:32:4: C0103: Constant name "pwd_context" doesn't conform to UPPER_CASE naming style (invalid-name)
resync\api\validation\enhanced_security_fixed.py:36:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\api\validation\enhanced_security_fixed.py:217:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\validation\enhanced_security_fixed.py:392:12: W0621: Redefining name 'validate_email' from outer scope (line 944) (redefined-outer-name)
resync\api\validation\enhanced_security_fixed.py:395:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\enhanced_security_fixed.py:392:12: C0415: Import outside toplevel (pydantic.validate_email) (import-outside-toplevel)
resync\api\validation\enhanced_security_fixed.py:500:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\enhanced_security_fixed.py:471:12: W0612: Unused variable 'expected_user' (unused-variable)
resync\api\validation\enhanced_security_fixed.py:471:27: W0612: Unused variable 'expected_session' (unused-variable)
resync\api\validation\enhanced_security_fixed.py:551:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\enhanced_security_fixed.py:733:8: W0104: Statement seems to have no effect (pointless-statement)
resync\api\validation\enhanced_security_fixed.py:717:14: W0613: Unused argument 'identifier' (unused-argument)
resync\api\validation\enhanced_security_fixed.py:854:16: W0707: Consider explicitly re-raising using 'raise RuntimeError('Password hashing failed - cannot proceed with insecure storage') from e' (raise-missing-from)
resync\api\validation\enhanced_security_fixed.py:902:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\enhanced_security_fixed.py:694:12: W0201: Attribute '_sql_patterns_compiled' defined outside __init__ (attribute-defined-outside-init)
resync\api\validation\enhanced_security_fixed.py:993:26: R1721: Unnecessary use of a comprehension, use list(message.get('headers', [])) instead. (unnecessary-comprehension)
resync\api\validation\enhanced_security_fixed.py:983:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module api.validation.files
resync\api\validation\files.py:163:12: C0415: Import outside toplevel (logging) (import-outside-toplevel)
resync\api\validation\files.py:165:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\validation\files.py:239:20: C0415: Import outside toplevel (logging) (import-outside-toplevel)
resync\api\validation\files.py:241:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module api.validation.middleware
resync\api\validation\middleware.py:21:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\api\validation\middleware.py:21:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\api\validation\middleware.py:93:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\middleware.py:320:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\middleware.py:394:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\api\validation\middleware.py:18:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\api\validation\middleware.py:435:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
resync\api\validation\middleware.py:438:4: R0913: Too many arguments (10/5) (too-many-arguments)
resync\api\validation\middleware.py:438:4: R0917: Too many positional arguments (10/5) (too-many-positional-arguments)
resync\api\validation\middleware.py:435:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\api\validation\middleware.py:526:4: W0706: The except handler raises immediately (try-except-raise)
************* Module api.validation.monitoring
resync\api\validation\monitoring.py:180:11: R0124: Redundant comparison - v != v (comparison-with-itself)
************* Module api.validation.query_params
resync\api\validation\query_params.py:477:0: C0301: Line too long (108/100) (line-too-long)
resync\api\validation\query_params.py:72:11: R1716: Simplify chained comparison between the operands (chained-comparison)
resync\api\validation\query_params.py:74:12: C0415: Import outside toplevel (logging) (import-outside-toplevel)
resync\api\validation\query_params.py:76:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\api\validation\query_params.py:298:14: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\query_params.py:314:16: E1101: Class 'StringConstraints' has no 'MODEL_NAME' member (no-member)
resync\api\validation\query_params.py:423:13: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
resync\api\validation\query_params.py:427:14: E1101: Class 'StringConstraints' has no 'AGENT_ID' member (no-member)
resync\api\validation\query_params.py:465:17: E1101: Class 'StringConstraints' has no 'SAFE_TEXT' member (no-member)
************* Module config.cors
resync\config\cors.py:9:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\config\cors.py:40:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\config\cors.py:38:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\config\cors.py:41:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\config\cors.py:71:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\config\cors.py:135:11: W0718: Catching too general exception Exception (broad-exception-caught)
resync\config\cors.py:132:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\config\cors.py:136:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module config.csp
resync\config\csp.py:8:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\config\csp.py:15:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\config\csp.py:52:4: C0415: Import outside toplevel (resync.api.middleware.csp_middleware.CSPMiddleware) (import-outside-toplevel)
resync\config\csp.py:59:4: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module config.enhanced_security
resync\config\enhanced_security.py:291:0: C0301: Line too long (112/100) (line-too-long)
resync\config\enhanced_security.py:8:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\config\enhanced_security.py:21:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\config\enhanced_security.py:26:4: R0913: Too many arguments (15/5) (too-many-arguments)
resync\config\enhanced_security.py:26:4: R0917: Too many positional arguments (15/5) (too-many-positional-arguments)
resync\config\enhanced_security.py:21:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\config\enhanced_security.py:274:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module config.security
resync\config\security.py:28:0: C0301: Line too long (105/100) (line-too-long)
resync\config\security.py:16:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module config.settings
resync\config\settings.py:569:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module config.settings_types
resync\config\settings_types.py:24:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\config\settings_types.py:24:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
************* Module config.settings_validators
resync\config\settings_validators.py:77:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
************* Module config.slo
resync\config\slo.py:14:4: C0103: Attribute name "API_RESPONSE_TIME_P95" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:15:4: C0103: Attribute name "API_AVAILABILITY" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:16:4: C0103: Attribute name "ERROR_RATE_THRESHOLD" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:19:4: C0103: Attribute name "TWS_CONNECTION_AVAILABILITY" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:20:4: C0103: Attribute name "AI_AGENT_RESPONSE_TIME" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:21:4: C0103: Attribute name "CHAT_MESSAGE_DELIVERY_TIME" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:24:4: C0103: Attribute name "MAX_CONCURRENT_USERS" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:25:4: C0103: Attribute name "MAX_REQUESTS_PER_MINUTE" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:26:4: C0103: Attribute name "CACHE_HIT_RATIO_THRESHOLD" doesn't conform to snake_case naming style (invalid-name)
resync\config\slo.py:10:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
************* Module core.connection_pool_manager
resync\core\connection_pool_manager.py:20:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\core\connection_pool_manager.py:33:0: E0611: No name 'RedisConnectionPool' in module 'resync.core.pools.redis_pool' (no-name-in-module)
resync\core\connection_pool_manager.py:39:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\core\connection_pool_manager.py:139:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
resync\core\connection_pool_manager.py:169:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\connection_pool_manager.py:228:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\connection_pool_manager.py:523:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\connection_pool_manager.py:538:4: W0603: Using the global statement (global-statement)
resync\core\connection_pool_manager.py:553:4: W0603: Using the global statement (global-statement)
resync\core\connection_pool_manager.py:20:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party import "resync.core.smart_pooling.SmartConnectionPool"  (wrong-import-order)
resync\core\connection_pool_manager.py:22:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module core.exceptions
resync\core\exceptions.py:1:0: C0302: Too many lines in module (1346/1000) (too-many-lines)
resync\core\exceptions.py:505:0: W0622: Redefining built-in 'TimeoutError' (redefined-builtin)
resync\core\exceptions.py:118:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\exceptions.py:140:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\core\exceptions.py:140:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\core\exceptions.py:281:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\core\exceptions.py:281:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\core\exceptions.py:362:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:362:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:421:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:421:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:451:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:451:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:481:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:481:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:511:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:511:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:543:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:543:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:570:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:570:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:591:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:591:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:691:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:691:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:716:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:716:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:763:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:763:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:790:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:790:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:817:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:817:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:838:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\core\exceptions.py:838:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\core\exceptions.py:912:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:912:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:939:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:939:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:966:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:966:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:992:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:992:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:1063:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:1063:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:1091:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:1091:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:1118:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:1118:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:1131:8: E1123: Unexpected keyword argument 'error_code' in method call (unexpected-keyword-arg)
resync\core\exceptions.py:1131:8: E1123: Unexpected keyword argument 'status_code' in method call (unexpected-keyword-arg)
resync\core\exceptions.py:1131:8: E1123: Unexpected keyword argument 'severity' in method call (unexpected-keyword-arg)
resync\core\exceptions.py:1145:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:1145:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\exceptions.py:1179:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\core\exceptions.py:1179:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\core\exceptions.py:1212:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\exceptions.py:1212:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
************* Module core.fastapi_di
resync\core\fastapi_di.py:24:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\fastapi_di.py:25:0: E0401: Unable to import 'resync_new.utils.interfaces' (import-error)
resync\core\fastapi_di.py:35:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\core\fastapi_di.py:225:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\fastapi_di.py:24:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party imports "resync.core.agent_manager.AgentManager", "resync.core.audit_queue.AsyncAuditQueue", "resync.core.connection_manager.ConnectionManager" (...) "resync.core.file_ingestor.create_file_ingestor", "resync.core.knowledge_graph.AsyncKnowledgeGraph", "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\core\fastapi_di.py:25:0: C0411: third party import "resync_new.utils.interfaces.IAgentManager" should be placed before first party imports "resync.core.agent_manager.AgentManager", "resync.core.audit_queue.AsyncAuditQueue", "resync.core.connection_manager.ConnectionManager" (...) "resync.core.file_ingestor.create_file_ingestor", "resync.core.knowledge_graph.AsyncKnowledgeGraph", "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\core\fastapi_di.py:35:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party imports "resync.core.agent_manager.AgentManager", "resync.core.audit_queue.AsyncAuditQueue", "resync.core.connection_manager.ConnectionManager" (...) "resync.core.file_ingestor.create_file_ingestor", "resync.core.knowledge_graph.AsyncKnowledgeGraph", "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\core\fastapi_di.py:36:0: C0411: third party import "starlette.middleware.base.BaseHTTPMiddleware" should be placed before first party imports "resync.core.agent_manager.AgentManager", "resync.core.audit_queue.AsyncAuditQueue", "resync.core.connection_manager.ConnectionManager" (...) "resync.core.file_ingestor.create_file_ingestor", "resync.core.knowledge_graph.AsyncKnowledgeGraph", "resync.core.teams_integration.TeamsIntegration"  (wrong-import-order)
resync\core\fastapi_di.py:38:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module core.rate_limiter
resync\core\rate_limiter.py:13:0: E0401: Unable to import 'resync.config.settings' (import-error)
resync\core\rate_limiter.py:13:0: E0611: No name 'settings' in module 'resync.config' (no-name-in-module)
************* Module core.redis_init
resync\core\redis_init.py:99:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\core\redis_init.py:99:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\core\redis_init.py:99:4: R0914: Too many local variables (17/15) (too-many-locals)
resync\core\redis_init.py:99:4: R0915: Too many statements (51/50) (too-many-statements)
************* Module core.cache.cache_factory
resync\core\cache\cache_factory.py:12:0: E0401: Unable to import 'resync.core.cache.unified_cache' (import-error)
resync\core\cache\cache_factory.py:12:0: E0611: No name 'unified_cache' in module 'resync.core.cache' (no-name-in-module)
resync\core\cache\cache_factory.py:35:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\core\cache\cache_factory.py:35:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\core\cache\cache_factory.py:308:8: C0415: Import outside toplevel (warnings) (import-outside-toplevel)
resync\core\cache\cache_factory.py:342:8: C0415: Import outside toplevel (warnings) (import-outside-toplevel)
resync\core\cache\cache_factory.py:371:8: C0415: Import outside toplevel (warnings) (import-outside-toplevel)
************* Module core.cache.chucknorris_optimizer
resync\core\cache\chucknorris_optimizer.py:56:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:69:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:74:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:96:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:99:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:103:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:107:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:113:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:129:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:133:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:138:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:140:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:147:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:149:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:154:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:156:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:162:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:172:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:174:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:175:75: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:180:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:183:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:190:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:195:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:200:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:209:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:211:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:216:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:218:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:242:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:246:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:248:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:253:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:263:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:265:0: C0301: Line too long (101/100) (line-too-long)
resync\core\cache\chucknorris_optimizer.py:269:0: C0301: Line too long (105/100) (line-too-long)
resync\core\cache\chucknorris_optimizer.py:270:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:274:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:276:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:281:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:291:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:297:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:304:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:308:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:313:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:317:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:323:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:326:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:329:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:335:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:339:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:345:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:347:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:351:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:355:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:357:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:362:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:364:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:368:0: C0301: Line too long (106/100) (line-too-long)
resync\core\cache\chucknorris_optimizer.py:371:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:377:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:383:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:386:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:392:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:401:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:405:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:407:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:413:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:415:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:426:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:431:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:438:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:442:0: C0301: Line too long (109/100) (line-too-long)
resync\core\cache\chucknorris_optimizer.py:443:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:448:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:451:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:461:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:464:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:470:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:478:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:487:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:492:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:499:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:504:66: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:506:67: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:508:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:512:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:520:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:527:0: C0301: Line too long (104/100) (line-too-long)
resync\core\cache\chucknorris_optimizer.py:531:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:536:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:539:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:551:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\cache\chucknorris_optimizer.py:35:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
resync\core\cache\chucknorris_optimizer.py:50:0: R0902: Too many instance attributes (20/7) (too-many-instance-attributes)
resync\core\cache\chucknorris_optimizer.py:85:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\core\cache\chucknorris_optimizer.py:245:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:358:30: W0613: Unused argument 'key' (unused-argument)
resync\core\cache\chucknorris_optimizer.py:409:8: C0415: Import outside toplevel (re) (import-outside-toplevel)
resync\core\cache\chucknorris_optimizer.py:424:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\chucknorris_optimizer.py:425:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:442:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:466:8: C0200: Consider using enumerate instead of iterating with range and len (consider-using-enumerate)
resync\core\cache\chucknorris_optimizer.py:497:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\chucknorris_optimizer.py:491:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:498:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:484:21: W0612: Unused variable 'value' (unused-variable)
resync\core\cache\chucknorris_optimizer.py:484:28: W0612: Unused variable 'ttl' (unused-variable)
resync\core\cache\chucknorris_optimizer.py:548:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\chucknorris_optimizer.py:547:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:549:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\chucknorris_optimizer.py:532:31: W0613: Unused argument 'cache_client' (unused-argument)
resync\core\cache\chucknorris_optimizer.py:18:0: W0611: Unused import weakref (unused-import)
resync\core\cache\chucknorris_optimizer.py:19:0: W0611: Unused import hashlib (unused-import)
************* Module core.cache.memory_manager
resync\core\cache\memory_manager.py:183:0: C0301: Line too long (114/100) (line-too-long)
resync\core\cache\memory_manager.py:207:0: C0301: Line too long (121/100) (line-too-long)
resync\core\cache\memory_manager.py:15:0: E0401: Unable to import 'resync_new.core.monitoring.metrics' (import-error)
resync\core\cache\memory_manager.py:72:8: W0613: Unused argument 'enable_weak_refs' (unused-argument)
resync\core\cache\memory_manager.py:116:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\memory_manager.py:228:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\memory_manager.py:182:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\memory_manager.py:206:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\memory_manager.py:230:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\memory_manager.py:249:4: R0914: Too many local variables (20/15) (too-many-locals)
resync\core\cache\memory_manager.py:268:8: C0415: Import outside toplevel (asyncio) (import-outside-toplevel)
resync\core\cache\memory_manager.py:355:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\memory_manager.py:249:4: R0912: Too many branches (14/12) (too-many-branches)
resync\core\cache\memory_manager.py:425:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\memory_manager.py:426:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\memory_manager.py:464:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\cache\memory_manager.py:464:45: W0613: Unused argument 'correlation_id' (unused-argument)
************* Module core.cache.persistence_manager
resync\core\cache\persistence_manager.py:48:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:107:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:113:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:114:12: W0707: Consider explicitly re-raising using 'raise OSError(f'Failed to create snapshot: {e}') from e' (raise-missing-from)
resync\core\cache\persistence_manager.py:116:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:117:12: W0707: Consider explicitly re-raising using 'raise ValueError(f'Serialization failed: {e}') from e' (raise-missing-from)
resync\core\cache\persistence_manager.py:149:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:150:12: W0707: Consider explicitly re-raising using 'raise OSError(f'Failed to read snapshot: {e}') from e' (raise-missing-from)
resync\core\cache\persistence_manager.py:152:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:155:12: W0707: Consider explicitly re-raising using 'raise ValueError(f'Invalid snapshot format: {e}') from e' (raise-missing-from)
resync\core\cache\persistence_manager.py:184:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:202:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:210:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:119:4: R0912: Too many branches (15/12) (too-many-branches)
resync\core\cache\persistence_manager.py:254:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:280:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:286:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:327:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:330:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:336:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\persistence_manager.py:341:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module core.cache.strategies
resync\core\cache\strategies.py:146:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
resync\core\cache\strategies.py:613:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
resync\core\cache\strategies.py:18:0: E0401: Unable to import 'resync_new.core.monitoring.metrics' (import-error)
resync\core\cache\strategies.py:28:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\core\cache\strategies.py:41:4: R0913: Too many arguments (9/5) (too-many-arguments)
resync\core\cache\strategies.py:41:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
resync\core\cache\strategies.py:37:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:58:4: R0913: Too many arguments (9/5) (too-many-arguments)
resync\core\cache\strategies.py:58:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
resync\core\cache\strategies.py:58:4: R0914: Too many local variables (17/15) (too-many-locals)
resync\core\cache\strategies.py:154:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\strategies.py:160:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\cache\strategies.py:160:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\cache\strategies.py:193:8: W0613: Unused argument 'shard_locks' (unused-argument)
resync\core\cache\strategies.py:55:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:240:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:314:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\strategies.py:353:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\strategies.py:325:4: R0911: Too many return statements (9/6) (too-many-return-statements)
resync\core\cache\strategies.py:362:8: W0613: Unused argument 'shard_locks' (unused-argument)
resync\core\cache\strategies.py:386:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\core\cache\strategies.py:386:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\core\cache\strategies.py:420:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\strategies.py:254:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:468:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:547:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\strategies.py:592:12: W0104: Statement seems to have no effect (pointless-statement)
resync\core\cache\strategies.py:602:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\cache\strategies.py:602:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\cache\strategies.py:482:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\cache\strategies.py:18:0: C0411: third party import "resync_new.core.monitoring.metrics.log_with_correlation" should be placed before first party import "resync.core.write_ahead_log.WalEntry"  (wrong-import-order)
resync\core\cache\strategies.py:23:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module core.cache.transaction_manager
resync\core\cache\transaction_manager.py:88:0: C0301: Line too long (169/100) (line-too-long)
resync\core\cache\transaction_manager.py:195:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\transaction_manager.py:152:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:159:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:168:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:174:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:259:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\transaction_manager.py:216:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:223:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:232:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\cache\transaction_manager.py:238:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module core.cache.unified_cache
resync\core\cache\unified_cache.py:341:0: C0301: Line too long (110/100) (line-too-long)
resync\core\cache\unified_cache.py:37:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\core\cache\unified_cache.py:88:8: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\cache\unified_cache.py:91:8: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\cache\unified_cache.py:114:0: R0902: Too many instance attributes (22/7) (too-many-instance-attributes)
resync\core\cache\unified_cache.py:156:0: R0902: Too many instance attributes (17/7) (too-many-instance-attributes)
resync\core\cache\unified_cache.py:210:0: R0902: Too many instance attributes (20/7) (too-many-instance-attributes)
resync\core\cache\unified_cache.py:265:30: E1123: Unexpected keyword argument 'enable_weak_refs' in constructor call (unexpected-keyword-arg)
resync\core\cache\unified_cache.py:325:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\unified_cache.py:373:4: W0236: Method 'get' was expected to be 'non-async', found it instead as 'async' (invalid-overridden-method)
resync\core\cache\unified_cache.py:476:4: W0236: Method 'set' was expected to be 'non-async', found it instead as 'async' (invalid-overridden-method)
resync\core\cache\unified_cache.py:540:34: W0613: Unused argument 'ttl' (unused-argument)
resync\core\cache\unified_cache.py:550:4: W0236: Method 'delete' was expected to be 'non-async', found it instead as 'async' (invalid-overridden-method)
resync\core\cache\unified_cache.py:574:41: E0606: Possibly using variable 'l2_deleted' before assignment (possibly-used-before-assignment)
resync\core\cache\unified_cache.py:609:4: W0236: Method 'clear' was expected to be 'non-async', found it instead as 'async' (invalid-overridden-method)
resync\core\cache\unified_cache.py:629:20: E1120: No value for argument 'key' in constructor call (no-value-for-parameter)
resync\core\cache\unified_cache.py:630:34: E1101: Class 'WalOperationType' has no 'CLEAR' member (no-member)
resync\core\cache\unified_cache.py:753:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\unified_cache.py:750:12: C0415: Import outside toplevel (sys) (import-outside-toplevel)
resync\core\cache\unified_cache.py:764:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\cache\unified_cache.py:868:35: E1101: Instance of 'CacheEntry' has no 'is_expired' member (no-member)
resync\core\cache\unified_cache.py:37:0: C0411: third party import "resync_new.utils.exceptions.CacheError" should be placed before first party import "resync.core.write_ahead_log.WalEntry"  (wrong-import-order)
resync\core\cache\unified_cache.py:96:0: C0411: standard import "contextlib" should be placed before third party import "resync_new.utils.exceptions.CacheError" and first party imports "resync.core.write_ahead_log.WalEntry", "resync.core.cache.base_cache.BaseCache", "resync.core.cache.memory_manager.CacheEntry", "resync.core.cache.persistence_manager.CachePersistenceManager", "resync.core.cache.transaction_manager.CacheTransactionManager"  (wrong-import-order)
resync\core\cache\unified_cache.py:98:0: C0411: third party import "prometheus_client.CollectorRegistry" should be placed before first party imports "resync.core.write_ahead_log.WalEntry", "resync.core.cache.base_cache.BaseCache", "resync.core.cache.memory_manager.CacheEntry", "resync.core.cache.persistence_manager.CachePersistenceManager", "resync.core.cache.transaction_manager.CacheTransactionManager"  (wrong-import-order)
resync\core\cache\unified_cache.py:39:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module core.health.circuit_breaker
resync\core\health\circuit_breaker.py:83:16: W0719: Raising too general exception: Exception (broad-exception-raised)
************* Module core.health.circuit_breaker_manager
resync\core\health\circuit_breaker_manager.py:156:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\circuit_breaker_manager.py:220:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\circuit_breaker_manager.py:259:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.component_cache_manager
resync\core\health\component_cache_manager.py:15:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\component_cache_manager.py:20:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\component_cache_manager.py:309:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
************* Module core.health.enhanced_health_config_manager
resync\core\health\enhanced_health_config_manager.py:13:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
************* Module core.health.global_health_service_manager
resync\core\health\global_health_service_manager.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
************* Module core.health.health_alerting
resync\core\health\health_alerting.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_alerting.py:435:14: W0613: Unused argument 'components' (unused-argument)
************* Module core.health.health_check_retry
resync\core\health\health_check_retry.py:56:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_check_service
resync\core\health\health_check_service.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\health\health_check_service.py:6:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_check_service.py:85:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_check_service.py:200:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_check_service.py:246:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_check_service.py:204:4: R0911: Too many return statements (8/6) (too-many-return-statements)
************* Module core.health.health_check_utils
resync\core\health\health_check_utils.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_check_utils.py:63:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_config_manager
resync\core\health\health_config_manager.py:242:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
resync\core\health\health_config_manager.py:257:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
resync\core\health\health_config_manager.py:15:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_config_manager.py:366:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_history_manager
resync\core\health\health_history_manager.py:15:0: E0401: Unable to import 'resync.models.health_models' (import-error)
resync\core\health\health_history_manager.py:15:0: E0611: No name 'health_models' in module 'resync.models' (no-name-in-module)
resync\core\health\health_history_manager.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_history_manager.py:25:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\health_history_manager.py:36:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\health\health_history_manager.py:36:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\health\health_history_manager.py:164:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_history_manager.py:158:20: R1716: Simplify chained comparison between the operands (chained-comparison)
resync\core\health\health_history_manager.py:189:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_history_manager.py:16:0: C0411: third party import "resync_new.models.health_models.HealthCheckResult" should be placed before first party import "resync.models.health_models.ComponentHealth"  (wrong-import-order)
************* Module core.health.health_metrics_simplified
resync\core\health\health_metrics_simplified.py:19:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_metrics_simplified.py:125:4: W0603: Using the global statement (global-statement)
************* Module core.health.health_monitoring_coordinator
resync\core\health\health_monitoring_coordinator.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_monitoring_coordinator.py:75:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_monitoring_observer
resync\core\health\health_monitoring_observer.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_monitoring_observer.py:24:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\health\health_monitoring_observer.py:24:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\health\health_monitoring_observer.py:21:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\core\health\health_monitoring_observer.py:182:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_monitoring_observer.py:193:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_service_consolidated
resync\core\health\health_service_consolidated.py:19:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_service_consolidated.py:59:16: W0719: Raising too general exception: Exception (broad-exception-raised)
resync\core\health\health_service_consolidated.py:38:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\health\health_service_consolidated.py:82:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\core\health\health_service_consolidated.py:302:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:347:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:323:12: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\health_service_consolidated.py:323:12: C0415: Import outside toplevel (resync_new.core.connection_pool_manager.get_advanced_connection_pool_manager) (import-outside-toplevel)
resync\core\health\health_service_consolidated.py:382:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:361:12: E0401: Unable to import 'resync.core.cache.unified_cache' (import-error)
resync\core\health\health_service_consolidated.py:361:12: C0415: Import outside toplevel (resync.core.cache.unified_cache.UnifiedAsyncCache) (import-outside-toplevel)
resync\core\health\health_service_consolidated.py:361:12: E0611: No name 'unified_cache' in module 'resync.core.cache' (no-name-in-module)
resync\core\health\health_service_consolidated.py:417:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:395:12: E0401: Unable to import 'resync.core.cache.unified_cache' (import-error)
resync\core\health\health_service_consolidated.py:395:12: C0415: Import outside toplevel (resync.core.cache.unified_cache.UnifiedAsyncCache) (import-outside-toplevel)
resync\core\health\health_service_consolidated.py:395:12: E0611: No name 'unified_cache' in module 'resync.core.cache' (no-name-in-module)
resync\core\health\health_service_consolidated.py:481:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:456:16: R1714: Consider merging these comparisons with 'in' by using 'HealthStatus.UNHEALTHY in (cpu_status, memory_status, disk_status)'. Use a set instead if elements are hashable. (consider-using-in)
resync\core\health\health_service_consolidated.py:462:16: R1714: Consider merging these comparisons with 'in' by using 'HealthStatus.DEGRADED in (cpu_status, memory_status, disk_status)'. Use a set instead if elements are hashable. (consider-using-in)
resync\core\health\health_service_consolidated.py:519:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:494:12: C0415: Import outside toplevel (resync.core.websocket_pool_manager.get_websocket_pool_manager) (import-outside-toplevel)
resync\core\health\health_service_consolidated.py:503:41: E1101: Instance of 'WebSocketPoolStats' has no 'get' member (no-member)
resync\core\health\health_service_consolidated.py:539:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_consolidated.py:629:4: W0603: Using the global statement (global-statement)
resync\core\health\health_service_consolidated.py:643:4: W0603: Using the global statement (global-statement)
************* Module core.health.health_service_facade
resync\core\health\health_service_facade.py:17:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_service_facade.py:42:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
resync\core\health\health_service_facade.py:242:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_facade.py:300:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_facade.py:348:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_facade.py:357:14: W0613: Unused argument 'hours' (unused-argument)
resync\core\health\health_service_facade.py:357:31: W0613: Unused argument 'max_entries' (unused-argument)
resync\core\health\health_service_facade.py:423:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_service_manager
resync\core\health\health_service_manager.py:13:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_service_manager.py:15:0: E0401: Unable to import 'core.health.enhanced_health_service' (import-error)
resync\core\health\health_service_manager.py:42:14: W0613: Unused argument 'config' (unused-argument)
resync\core\health\health_service_manager.py:215:4: W0603: Using the global statement (global-statement)
resync\core\health\health_service_manager.py:291:4: W0603: Using the global statement (global-statement)
************* Module core.health.health_service_manager_simplified
resync\core\health\health_service_manager_simplified.py:129:4: E0117: nonlocal name _health_service_manager found without binding (nonlocal-without-binding)
resync\core\health\health_service_manager_simplified.py:172:4: E0117: nonlocal name _health_service_manager found without binding (nonlocal-without-binding)
************* Module core.health.health_service_orchestrator
resync\core\health\health_service_orchestrator.py:286:0: C0301: Line too long (143/100) (line-too-long)
resync\core\health\health_service_orchestrator.py:289:0: C0301: Line too long (137/100) (line-too-long)
resync\core\health\health_service_orchestrator.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_service_orchestrator.py:50:4: R0914: Too many local variables (17/15) (too-many-locals)
resync\core\health\health_service_orchestrator.py:76:8: C0415: Import outside toplevel (resync.core.health_utils.initialize_health_result) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:94:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:54:8: W0613: Unused argument 'cache_manager' (unused-argument)
resync\core\health\health_service_orchestrator.py:209:4: R0914: Too many local variables (18/15) (too-many-locals)
resync\core\health\health_service_orchestrator.py:323:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:214:12: C0415: Import outside toplevel (resync.core.connection_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:214:12: E0611: No name 'get_connection_pool_manager' in module 'resync.core.connection_manager' (no-name-in-module)
resync\core\health\health_service_orchestrator.py:418:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:343:12: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\health_service_orchestrator.py:343:12: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:355:12: C0415: Import outside toplevel (redis.asyncio) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:356:12: C0415: Import outside toplevel (redis.exceptions.RedisError) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:357:12: C0415: Import outside toplevel (redis.exceptions.TimeoutError) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:413:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:480:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:437:12: E0401: Unable to import 'resync_new.core.cache' (import-error)
resync\core\health\health_service_orchestrator.py:437:12: C0415: Import outside toplevel (resync_new.core.cache.AsyncTTLCache) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:455:16: W0719: Raising too general exception: Exception (broad-exception-raised)
resync\core\health\health_service_orchestrator.py:532:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:499:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:583:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:550:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:640:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:601:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:683:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:659:12: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\health_service_orchestrator.py:659:12: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:786:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_service_orchestrator.py:701:12: C0415: Import outside toplevel (resync.core.connection_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\health_service_orchestrator.py:701:12: E0611: No name 'get_connection_pool_manager' in module 'resync.core.connection_manager' (no-name-in-module)
resync\core\health\health_service_orchestrator.py:814:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_service_simplified
resync\core\health\health_service_simplified.py:19:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\health_service_simplified.py:20:0: E0401: Unable to import 'resync_new.core.cache' (import-error)
resync\core\health\health_service_simplified.py:21:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\health_service_simplified.py:24:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_service_simplified.py:19:0: C0411: third party import "resync_new.config.settings.get_settings" should be placed before first party import "resync.core.websocket_pool_manager.get_websocket_pool_manager"  (wrong-import-order)
resync\core\health\health_service_simplified.py:20:0: C0411: third party import "resync_new.core.cache.get_cache_hierarchy" should be placed before first party import "resync.core.websocket_pool_manager.get_websocket_pool_manager"  (wrong-import-order)
resync\core\health\health_service_simplified.py:21:0: C0411: third party import "resync_new.core.connection_pool_manager.get_advanced_connection_pool_manager" should be placed before first party import "resync.core.websocket_pool_manager.get_websocket_pool_manager"  (wrong-import-order)
resync\core\health\health_service_simplified.py:24:0: C0411: third party import "resync_new.models.health_models.ComponentHealth" should be placed before first party import "resync.core.websocket_pool_manager.get_websocket_pool_manager"  (wrong-import-order)
************* Module core.health.memory_manager
resync\core\health\memory_manager.py:22:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)
resync\core\health\memory_manager.py:81:12: R1731: Consider using 'self._peak_memory_usage_mb = max(self._peak_memory_usage_mb, estimated_usage_mb)' instead of unnecessary if block (consider-using-max-builtin)
resync\core\health\memory_manager.py:122:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:176:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:185:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:423:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:505:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:528:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_manager.py:550:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.memory_usage_tracker
resync\core\health\memory_usage_tracker.py:22:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\memory_usage_tracker.py:87:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_usage_tracker.py:138:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_usage_tracker.py:175:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_usage_tracker.py:394:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\memory_usage_tracker.py:453:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitoring_aggregator
resync\core\health\monitoring_aggregator.py:198:0: C0301: Line too long (101/100) (line-too-long)
resync\core\health\monitoring_aggregator.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\health\monitoring_aggregator.py:9:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitoring_aggregator.py:18:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\monitoring_aggregator.py:50:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\health\monitoring_aggregator.py:110:12: C0415: Import outside toplevel (resync.core.health_service.get_health_check_service) (import-outside-toplevel)
resync\core\health\monitoring_aggregator.py:286:15: E1123: Unexpected keyword argument 'average_response_time' in constructor call (unexpected-keyword-arg)
resync\core\health\monitoring_aggregator.py:342:8: W0613: Unused argument 'components' (unused-argument)
resync\core\health\monitoring_aggregator.py:9:0: C0411: third party import "resync_new.models.health_models.ComponentHealth" should be placed before first party import "resync.core.health_service.HealthCheckService"  (wrong-import-order)
************* Module core.health.performance_metrics_collector
resync\core\health\performance_metrics_collector.py:16:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\performance_metrics_collector.py:64:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\performance_metrics_collector.py:87:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\performance_metrics_collector.py:124:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\performance_metrics_collector.py:241:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\performance_metrics_collector.py:159:4: R0912: Too many branches (13/12) (too-many-branches)
************* Module core.health.proactive_monitor
resync\core\health\proactive_monitor.py:272:0: C0301: Line too long (107/100) (line-too-long)
resync\core\health\proactive_monitor.py:15:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\proactive_monitor.py:52:8: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\proactive_monitor.py:52:8: C0415: Import outside toplevel (resync_new.config.settings.get_settings) (import-outside-toplevel)
resync\core\health\proactive_monitor.py:126:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\proactive_monitor.py:162:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\proactive_monitor.py:162:15: W0705: Catching previously caught exception type Exception (duplicate-except)
resync\core\health\proactive_monitor.py:84:12: C0415: Import outside toplevel (resync_new.core.monitoring.circuit_breaker.CircuitBreaker) (import-outside-toplevel)
resync\core\health\proactive_monitor.py:208:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\proactive_monitor.py:192:12: C0415: Import outside toplevel (resync.core.connection_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\proactive_monitor.py:192:12: E0611: No name 'get_connection_pool_manager' in module 'resync.core.connection_manager' (no-name-in-module)
resync\core\health\proactive_monitor.py:218:8: E0401: Unable to import 'resync_new.core.monitoring.circuit_breaker' (import-error)
resync\core\health\proactive_monitor.py:218:8: C0415: Import outside toplevel (resync_new.core.monitoring.circuit_breaker.adaptive_llm_api_breaker, resync_new.core.monitoring.circuit_breaker.adaptive_tws_api_breaker, resync_new.core.monitoring.circuit_breaker.llm_api_breaker, resync_new.core.monitoring.circuit_breaker.tws_api_breaker) (import-outside-toplevel)
resync\core\health\proactive_monitor.py:250:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\proactive_monitor.py:311:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\proactive_monitor.py:359:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.recovery_manager
resync\core\health\recovery_manager.py:18:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\recovery_manager.py:21:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\recovery_manager.py:41:4: R0914: Too many local variables (18/15) (too-many-locals)
resync\core\health\recovery_manager.py:130:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:98:20: E1101: Instance of 'ConnectionPoolManager' has no 'reset_pool' member (no-member)
resync\core\health\recovery_manager.py:153:4: R0914: Too many local variables (16/15) (too-many-locals)
resync\core\health\recovery_manager.py:230:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:253:4: R0914: Too many local variables (16/15) (too-many-locals)
resync\core\health\recovery_manager.py:330:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:378:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:361:23: E1101: Instance of 'ConnectionPoolManager' has no 'acquire_connection' member (no-member)
resync\core\health\recovery_manager.py:424:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:389:12: C0415: Import outside toplevel (resync.core.async_cache.AsyncTTLCache) (import-outside-toplevel)
resync\core\health\recovery_manager.py:447:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:459:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:471:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:483:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:495:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:507:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\recovery_manager.py:18:0: C0411: third party import "resync_new.core.connection_pool_manager.get_advanced_connection_pool_manager" should be placed before first party import "resync.core.pools.pool_manager.get_connection_pool_manager"  (wrong-import-order)
resync\core\health\recovery_manager.py:21:0: C0411: third party import "resync_new.models.health_models.RecoveryResult" should be placed before first party import "resync.core.pools.pool_manager.get_connection_pool_manager"  (wrong-import-order)
************* Module core.health.refactored_health_check_service
resync\core\health\refactored_health_check_service.py:115:0: C0301: Line too long (104/100) (line-too-long)
resync\core\health\refactored_health_check_service.py:15:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\refactored_health_check_service.py:101:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\refactored_health_check_service.py:220:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.refactored_health_service_orchestrator
resync\core\health\refactored_health_service_orchestrator.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\refactored_health_service_orchestrator.py:65:4: R0914: Too many local variables (21/15) (too-many-locals)
resync\core\health\refactored_health_service_orchestrator.py:115:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\refactored_health_service_orchestrator.py:69:8: W0613: Unused argument 'cache_manager' (unused-argument)
************* Module core.health.health_checkers.base_health_checker
resync\core\health\health_checkers\base_health_checker.py:15:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\base_health_checker.py:87:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\base_health_checker.py:64:14: W0613: Unused argument 'timeout_seconds' (unused-argument)
resync\core\health\health_checkers\base_health_checker.py:106:40: W0613: Unused argument 'exception' (unused-argument)
************* Module core.health.health_checkers.cache_health_checker
resync\core\health\health_checkers\cache_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\cache_health_checker.py:92:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\cache_health_checker.py:49:12: E0401: Unable to import 'resync_new.core.cache' (import-error)
resync\core\health\health_checkers\cache_health_checker.py:49:12: C0415: Import outside toplevel (resync_new.core.cache.AsyncTTLCache) (import-outside-toplevel)
resync\core\health\health_checkers\cache_health_checker.py:67:16: W0719: Raising too general exception: Exception (broad-exception-raised)
************* Module core.health.health_checkers.connection_pools_health_checker
resync\core\health\health_checkers\connection_pools_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\connection_pools_health_checker.py:133:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\connection_pools_health_checker.py:48:12: C0415: Import outside toplevel (resync.core.connection_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\health_checkers\connection_pools_health_checker.py:48:12: E0611: No name 'get_connection_pool_manager' in module 'resync.core.connection_manager' (no-name-in-module)
************* Module core.health.health_checkers.cpu_health_checker
resync\core\health\health_checkers\cpu_health_checker.py:15:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\cpu_health_checker.py:89:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\cpu_health_checker.py:49:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
************* Module core.health.health_checkers.database_health_checker
resync\core\health\health_checkers\database_health_checker.py:120:0: C0301: Line too long (143/100) (line-too-long)
resync\core\health\health_checkers\database_health_checker.py:123:0: C0301: Line too long (137/100) (line-too-long)
resync\core\health\health_checkers\database_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\database_health_checker.py:38:4: R0914: Too many local variables (18/15) (too-many-locals)
resync\core\health\health_checkers\database_health_checker.py:157:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\database_health_checker.py:48:12: C0415: Import outside toplevel (resync.core.connection_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\health_checkers\database_health_checker.py:48:12: E0611: No name 'get_connection_pool_manager' in module 'resync.core.connection_manager' (no-name-in-module)
************* Module core.health.health_checkers.filesystem_health_checker
resync\core\health\health_checkers\filesystem_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\filesystem_health_checker.py:84:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\filesystem_health_checker.py:49:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
************* Module core.health.health_checkers.health_checker_factory
resync\core\health\health_checkers\health_checker_factory.py:9:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
************* Module core.health.health_checkers.memory_health_checker
resync\core\health\health_checkers\memory_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\memory_health_checker.py:82:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\memory_health_checker.py:48:12: C0415: Import outside toplevel (psutil) (import-outside-toplevel)
************* Module core.health.health_checkers.redis_health_checker
resync\core\health\health_checkers\redis_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\redis_health_checker.py:124:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\redis_health_checker.py:49:12: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\health_checkers\redis_health_checker.py:49:12: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\core\health\health_checkers\redis_health_checker.py:61:12: C0415: Import outside toplevel (redis.asyncio) (import-outside-toplevel)
resync\core\health\health_checkers\redis_health_checker.py:62:12: C0415: Import outside toplevel (redis.exceptions.RedisError) (import-outside-toplevel)
resync\core\health\health_checkers\redis_health_checker.py:63:12: C0415: Import outside toplevel (redis.exceptions.TimeoutError) (import-outside-toplevel)
resync\core\health\health_checkers\redis_health_checker.py:119:23: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.health_checkers.tws_monitor_health_checker
resync\core\health\health_checkers\tws_monitor_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\tws_monitor_health_checker.py:77:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\health_checkers\tws_monitor_health_checker.py:49:12: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\health_checkers\tws_monitor_health_checker.py:49:12: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
************* Module core.health.health_checkers.websocket_pool_health_checker
resync\core\health\health_checkers\websocket_pool_health_checker.py:14:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\health_checkers\websocket_pool_health_checker.py:62:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.cache_monitor
resync\core\health\monitors\cache_monitor.py:17:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\cache_monitor.py:96:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\cache_monitor.py:53:12: E0401: Unable to import 'resync_new.core.cache' (import-error)
resync\core\health\monitors\cache_monitor.py:53:12: C0415: Import outside toplevel (resync_new.core.cache.AsyncTTLCache) (import-outside-toplevel)
resync\core\health\monitors\cache_monitor.py:71:16: W0719: Raising too general exception: Exception (broad-exception-raised)
resync\core\health\monitors\cache_monitor.py:129:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.connection_monitor
resync\core\health\monitors\connection_monitor.py:162:0: C0301: Line too long (108/100) (line-too-long)
resync\core\health\monitors\connection_monitor.py:15:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\monitors\connection_monitor.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\connection_monitor.py:134:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\connection_monitor.py:191:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.database_monitor
resync\core\health\monitors\database_monitor.py:186:0: C0301: Line too long (104/100) (line-too-long)
resync\core\health\monitors\database_monitor.py:192:0: C0301: Line too long (101/100) (line-too-long)
resync\core\health\monitors\database_monitor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\health\monitors\database_monitor.py:7:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\database_monitor.py:12:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\core\health\monitors\database_monitor.py:18:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
resync\core\health\monitors\database_monitor.py:56:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\health\monitors\database_monitor.py:226:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\database_monitor.py:121:16: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\monitors\database_monitor.py:121:16: C0415: Import outside toplevel (resync_new.core.connection_pool_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\monitors\database_monitor.py:309:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\database_monitor.py:252:16: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\core\health\monitors\database_monitor.py:252:16: C0415: Import outside toplevel (resync_new.core.connection_pool_manager.get_connection_pool_manager) (import-outside-toplevel)
resync\core\health\monitors\database_monitor.py:354:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\database_monitor.py:347:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.filesystem_monitor
resync\core\health\monitors\filesystem_monitor.py:404:29: W0511: TODO: Add checksum verification if needed (fixme)
resync\core\health\monitors\filesystem_monitor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\health\monitors\filesystem_monitor.py:10:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\filesystem_monitor.py:11:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\core\health\monitors\filesystem_monitor.py:17:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
resync\core\health\monitors\filesystem_monitor.py:44:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\health\monitors\filesystem_monitor.py:81:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\health\monitors\filesystem_monitor.py:117:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\monitors\filesystem_monitor.py:228:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\filesystem_monitor.py:299:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\filesystem_monitor.py:372:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\filesystem_monitor.py:385:8: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
************* Module core.health.monitors.redis_monitor
resync\core\health\monitors\redis_monitor.py:16:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\monitors\redis_monitor.py:17:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\redis_monitor.py:135:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\redis_monitor.py:63:12: C0415: Import outside toplevel (redis.asyncio) (import-outside-toplevel)
resync\core\health\monitors\redis_monitor.py:64:12: C0415: Import outside toplevel (redis.exceptions.RedisError) (import-outside-toplevel)
resync\core\health\monitors\redis_monitor.py:65:12: C0415: Import outside toplevel (redis.exceptions.TimeoutError) (import-outside-toplevel)
resync\core\health\monitors\redis_monitor.py:130:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\redis_monitor.py:168:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.service_monitor
resync\core\health\monitors\service_monitor.py:180:0: C0301: Line too long (101/100) (line-too-long)
resync\core\health\monitors\service_monitor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\health\monitors\service_monitor.py:9:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\service_monitor.py:32:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\health\monitors\service_monitor.py:143:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\service_monitor.py:195:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\service_monitor.py:244:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.system_monitor
resync\core\health\monitors\system_monitor.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\system_monitor.py:92:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\system_monitor.py:170:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.health.monitors.tws_monitor
resync\core\health\monitors\tws_monitor.py:15:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\core\health\monitors\tws_monitor.py:16:0: E0401: Unable to import 'resync_new.models.health_models' (import-error)
resync\core\health\monitors\tws_monitor.py:77:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\health\monitors\tws_monitor.py:129:15: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module core.monitoring.chucknorris_metrics
resync\core\monitoring\chucknorris_metrics.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:74:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:79:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:90:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:114:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:120:0: C0301: Line too long (120/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:125:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:130:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:134:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:138:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:145:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:148:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:150:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:155:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:157:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:160:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:163:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:166:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:169:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:173:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:175:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:180:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:182:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:190:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:196:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:199:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:201:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:212:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:218:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:227:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:231:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:238:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:240:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:244:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:251:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:253:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:258:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:259:0: C0301: Line too long (114/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:264:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:266:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:272:0: C0301: Line too long (102/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:273:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:274:0: C0301: Line too long (115/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:279:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:281:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:287:0: C0301: Line too long (102/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:288:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:289:0: C0301: Line too long (154/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:291:0: C0301: Line too long (122/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:294:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:298:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:301:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:307:0: C0301: Line too long (103/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:310:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:311:0: C0301: Line too long (136/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:313:0: C0301: Line too long (104/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:316:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:318:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:323:0: C0301: Line too long (109/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:326:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:327:0: C0301: Line too long (139/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:332:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:335:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:338:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:347:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:348:0: C0301: Line too long (120/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:353:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:356:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:358:0: C0301: Line too long (105/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:363:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:367:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:368:0: C0301: Line too long (125/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:375:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:378:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:385:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:388:0: C0301: Line too long (118/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:389:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:395:0: C0301: Line too long (114/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:398:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:408:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:410:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:414:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:428:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:439:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:448:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:452:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:462:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:470:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:472:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:474:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:481:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:483:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:493:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:497:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:501:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:517:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:533:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:537:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:552:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:554:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:559:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:561:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:565:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:568:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:570:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:574:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:578:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:583:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:585:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:589:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:591:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:595:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:601:0: C0301: Line too long (142/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:605:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:610:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:614:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:619:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:623:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:625:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:630:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:633:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:636:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:638:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:649:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:655:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:659:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:664:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:675:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:679:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:683:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:690:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:693:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:696:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:706:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:709:0: C0301: Line too long (102/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:717:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:720:0: C0301: Line too long (102/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:728:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:731:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:733:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:735:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:746:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:751:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:755:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:762:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:766:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:773:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:784:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:789:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:792:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:795:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:800:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:807:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:812:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:814:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:817:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:821:0: C0301: Line too long (120/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:822:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:842:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:856:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:871:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:885:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:887:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:892:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:922:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:926:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:928:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:931:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:946:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:947:0: C0301: Line too long (112/100) (line-too-long)
resync\core\monitoring\chucknorris_metrics.py:952:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:956:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\monitoring\chucknorris_metrics.py:53:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\core\monitoring\chucknorris_metrics.py:66:0: R0902: Too many instance attributes (20/7) (too-many-instance-attributes)
resync\core\monitoring\chucknorris_metrics.py:102:0: R0902: Too many instance attributes (20/7) (too-many-instance-attributes)
resync\core\monitoring\chucknorris_metrics.py:149:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:174:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:200:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:289:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\monitoring\chucknorris_metrics.py:289:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\monitoring\chucknorris_metrics.py:327:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\monitoring\chucknorris_metrics.py:327:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\monitoring\chucknorris_metrics.py:415:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\monitoring\chucknorris_metrics.py:415:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\monitoring\chucknorris_metrics.py:431:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:460:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:461:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:471:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:482:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:606:53: W0613: Unused argument 'severity' (unused-argument)
resync\core\monitoring\chucknorris_metrics.py:647:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:648:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:673:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:674:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:732:36: E0606: Possibly using variable 'aggregated' before assignment (possibly-used-before-assignment)
resync\core\monitoring\chucknorris_metrics.py:744:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:745:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:782:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:783:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:815:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:810:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
resync\core\monitoring\chucknorris_metrics.py:813:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:816:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:818:4: R0914: Too many local variables (16/15) (too-many-locals)
resync\core\monitoring\chucknorris_metrics.py:820:8: W0105: String statement has no effect (pointless-string-statement)
resync\core\monitoring\chucknorris_metrics.py:821:8: C0415: Import outside toplevel (prometheus_client.Gauge, prometheus_client.Counter, prometheus_client.Histogram, prometheus_client.generate_latest, prometheus_client.CONTENT_TYPE_LATEST, prometheus_client.CollectorRegistry) (import-outside-toplevel)
resync\core\monitoring\chucknorris_metrics.py:886:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:824:8: W0612: Unused variable 'cache_hit_ratio' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:830:8: W0612: Unused variable 'cache_misses' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:836:8: W0612: Unused variable 'cache_hits' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:844:8: W0612: Unused variable 'circuit_breaker_state' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:850:8: W0612: Unused variable 'circuit_breaker_failures' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:858:8: W0612: Unused variable 'request_duration' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:864:8: W0612: Unused variable 'api_request_duration' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:873:8: W0612: Unused variable 'error_rate' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:879:8: W0612: Unused variable 'total_requests' (unused-variable)
resync\core\monitoring\chucknorris_metrics.py:821:8: W0611: Unused generate_latest imported from prometheus_client (unused-import)
resync\core\monitoring\chucknorris_metrics.py:821:8: W0611: Unused CONTENT_TYPE_LATEST imported from prometheus_client (unused-import)
resync\core\monitoring\chucknorris_metrics.py:929:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:924:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
resync\core\monitoring\chucknorris_metrics.py:927:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:930:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:938:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\monitoring\chucknorris_metrics.py:935:12: C0415: Import outside toplevel (os) (import-outside-toplevel)
resync\core\monitoring\chucknorris_metrics.py:939:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\monitoring\chucknorris_metrics.py:102:0: R0904: Too many public methods (21/20) (too-many-public-methods)
resync\core\monitoring\chucknorris_metrics.py:17:0: W0611: Unused Tuple imported from typing (unused-import)
resync\core\monitoring\chucknorris_metrics.py:20:0: W0611: Unused import weakref (unused-import)
************* Module core.monitoring.metrics
resync\core\monitoring\metrics.py:11:0: C0301: Line too long (105/100) (line-too-long)
resync\core\monitoring\metrics.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\core\monitoring\metrics.py:82:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:86:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:92:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:105:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:109:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:114:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
resync\core\monitoring\metrics.py:168:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:188:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:192:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:196:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:200:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:249:0: R0902: Too many instance attributes (43/7) (too-many-instance-attributes)
resync\core\monitoring\metrics.py:363:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:443:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:457:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:464:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:496:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:533:41: W0212: Access to a protected member _quantile of a client class (protected-access)
resync\core\monitoring\metrics.py:536:41: W0212: Access to a protected member _quantile of a client class (protected-access)
resync\core\monitoring\metrics.py:550:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\monitoring\metrics.py:628:4: W0603: Using the global statement (global-statement)
resync\core\monitoring\metrics.py:636:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\monitoring\metrics.py:670:4: C0415: Import outside toplevel (functools) (import-outside-toplevel)
resync\core\monitoring\metrics.py:671:4: C0415: Import outside toplevel (inspect) (import-outside-toplevel)
************* Module core.pipeline.chucknorris_batch_processor
resync\core\pipeline\chucknorris_batch_processor.py:49:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:55:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:60:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:100:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:104:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:109:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:113:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:118:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:124:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:142:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:143:0: C0301: Line too long (106/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:147:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:154:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:159:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:164:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:173:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:177:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:182:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:189:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:194:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:196:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:199:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:202:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:207:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:212:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:214:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:220:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:230:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:233:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:235:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:247:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:252:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:254:0: C0301: Line too long (109/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:259:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:260:0: C0301: Line too long (107/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:264:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:268:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:272:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:276:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:283:0: C0301: Line too long (112/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:285:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:289:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:293:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:295:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:302:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:314:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:321:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:328:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:334:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:349:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:353:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:357:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:364:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:366:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:371:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:373:61: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:375:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:380:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:382:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:390:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:392:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:396:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:402:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:404:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:409:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:415:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:417:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:422:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:430:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:437:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:439:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:443:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:450:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:452:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:464:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:471:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:473:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:478:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:481:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:493:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:501:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:506:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:510:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:518:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:525:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:536:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:540:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:547:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:558:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:562:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:565:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:572:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:582:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:587:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:588:0: C0301: Line too long (105/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:593:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:596:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:606:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:612:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:623:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:634:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:639:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:643:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:647:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:650:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:666:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:672:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pipeline\chucknorris_batch_processor.py:676:0: C0301: Line too long (113/100) (line-too-long)
resync\core\pipeline\chucknorris_batch_processor.py:43:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
resync\core\pipeline\chucknorris_batch_processor.py:92:0: R0902: Too many instance attributes (20/7) (too-many-instance-attributes)
resync\core\pipeline\chucknorris_batch_processor.py:130:0: R0902: Too many instance attributes (23/7) (too-many-instance-attributes)
resync\core\pipeline\chucknorris_batch_processor.py:188:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:206:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:234:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:236:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\pipeline\chucknorris_batch_processor.py:236:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\pipeline\chucknorris_batch_processor.py:331:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:332:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:337:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
resync\core\pipeline\chucknorris_batch_processor.py:485:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:559:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:516:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:517:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:545:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:546:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:556:27: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:557:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:570:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:571:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:507:4: R0912: Too many branches (19/12) (too-many-branches)
resync\core\pipeline\chucknorris_batch_processor.py:588:70: W0613: Unused argument 'original_error' (unused-argument)
resync\core\pipeline\chucknorris_batch_processor.py:621:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:622:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:632:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pipeline\chucknorris_batch_processor.py:633:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:673:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pipeline\chucknorris_batch_processor.py:14:0: W0611: Unused defaultdict imported from collections (unused-import)
resync\core\pipeline\chucknorris_batch_processor.py:17:0: W0611: Unused Tuple imported from typing (unused-import)
resync\core\pipeline\chucknorris_batch_processor.py:17:0: W0611: Unused Union imported from typing (unused-import)
resync\core\pipeline\chucknorris_batch_processor.py:18:0: W0611: Unused import weakref (unused-import)
************* Module core.pools.base_pool
resync\core\pools\base_pool.py:27:0: R0902: Too many instance attributes (16/7) (too-many-instance-attributes)
resync\core\pools\base_pool.py:91:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\base_pool.py:95:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\base_pool.py:120:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\base_pool.py:122:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\base_pool.py:169:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\base_pool.py:170:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module core.pools.chucknorris_pool_optimizer
resync\core\pools\chucknorris_pool_optimizer.py:53:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:58:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:63:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:68:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:82:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:90:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:94:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:98:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:110:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:117:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:123:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:128:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:134:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:153:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:157:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:161:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:165:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:171:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:176:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:181:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:185:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:187:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:192:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:194:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:198:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:200:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:207:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:213:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:218:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:220:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:229:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:235:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:237:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:241:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:244:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:247:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:254:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:257:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:261:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:265:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:267:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:268:80: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:275:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:277:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:281:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:289:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:293:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:296:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:299:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:302:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:305:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:311:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:313:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:323:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:325:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:328:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:330:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:343:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:354:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:357:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:360:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:362:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:367:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:373:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:376:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:387:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:393:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:404:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:408:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:413:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:415:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:426:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:432:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:436:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:445:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:446:0: C0325: Unnecessary parens after '=' keyword (superfluous-parens)
resync\core\pools\chucknorris_pool_optimizer.py:447:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:449:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:455:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:466:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:472:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:478:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:483:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:490:50: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:499:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:505:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:509:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:520:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:525:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:527:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:532:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:540:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:548:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:553:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:566:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:570:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:572:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:576:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:589:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:591:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:595:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:602:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:607:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:614:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:619:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:623:0: C0301: Line too long (114/100) (line-too-long)
resync\core\pools\chucknorris_pool_optimizer.py:624:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:626:0: C0301: Line too long (120/100) (line-too-long)
resync\core\pools\chucknorris_pool_optimizer.py:627:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:632:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:644:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:648:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\pools\chucknorris_pool_optimizer.py:42:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
resync\core\pools\chucknorris_pool_optimizer.py:76:0: R0902: Too many instance attributes (15/7) (too-many-instance-attributes)
resync\core\pools\chucknorris_pool_optimizer.py:104:0: R0902: Too many instance attributes (23/7) (too-many-instance-attributes)
resync\core\pools\chucknorris_pool_optimizer.py:142:0: R0902: Too many instance attributes (18/7) (too-many-instance-attributes)
resync\core\pools\chucknorris_pool_optimizer.py:186:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:199:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:219:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:245:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:273:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:276:12: W0612: Unused variable 'connection' (unused-variable)
resync\core\pools\chucknorris_pool_optimizer.py:321:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\chucknorris_pool_optimizer.py:322:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:329:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:312:24: W0612: Unused variable 'metrics' (unused-variable)
resync\core\pools\chucknorris_pool_optimizer.py:377:8: R1705: Unnecessary "else" after "return", remove the "else" and de-indent the code inside it (no-else-return)
resync\core\pools\chucknorris_pool_optimizer.py:406:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\chucknorris_pool_optimizer.py:405:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:407:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:464:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\chucknorris_pool_optimizer.py:465:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:495:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\chucknorris_pool_optimizer.py:496:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:518:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\chucknorris_pool_optimizer.py:519:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:552:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:571:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:577:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
resync\core\pools\chucknorris_pool_optimizer.py:601:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:606:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\chucknorris_pool_optimizer.py:14:0: W0611: Unused defaultdict imported from collections (unused-import)
resync\core\pools\chucknorris_pool_optimizer.py:17:0: W0611: Unused Set imported from typing (unused-import)
resync\core\pools\chucknorris_pool_optimizer.py:17:0: W0611: Unused Union imported from typing (unused-import)
resync\core\pools\chucknorris_pool_optimizer.py:18:0: W0611: Unused import weakref (unused-import)
************* Module core.pools.connection_pool_monitor
resync\core\pools\connection_pool_monitor.py:356:0: C0301: Line too long (131/100) (line-too-long)
resync\core\pools\connection_pool_monitor.py:358:0: C0301: Line too long (138/100) (line-too-long)
resync\core\pools\connection_pool_monitor.py:360:0: C0301: Line too long (127/100) (line-too-long)
resync\core\pools\connection_pool_monitor.py:15:0: E0401: Unable to import 'resync.core.simple_logger' (import-error)
resync\core\pools\connection_pool_monitor.py:15:0: E0611: No name 'simple_logger' in module 'resync.core' (no-name-in-module)
resync\core\pools\connection_pool_monitor.py:36:0: R0902: Too many instance attributes (11/7) (too-many-instance-attributes)
resync\core\pools\connection_pool_monitor.py:60:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)
resync\core\pools\connection_pool_monitor.py:161:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\connection_pool_monitor.py:190:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\connection_pool_monitor.py:292:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\pools\connection_pool_monitor.py:292:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\pools\connection_pool_monitor.py:343:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\core\pools\connection_pool_monitor.py:343:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\core\pools\connection_pool_monitor.py:413:4: W0603: Using the global statement (global-statement)
resync\core\pools\connection_pool_monitor.py:430:4: W0603: Using the global statement (global-statement)
************* Module core.pools.db_pool
resync\core\pools\db_pool.py:48:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module core.pools.http_pool
resync\core\pools\http_pool.py:62:0: C0301: Line too long (140/100) (line-too-long)
resync\core\pools\http_pool.py:61:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\http_pool.py:65:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\http_pool.py:90:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\http_pool.py:99:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\http_pool.py:107:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module core.pools.pool_manager
resync\core\pools\pool_manager.py:22:0: E0611: No name 'RedisConnectionPool' in module 'resync.core.pools.redis_pool' (no-name-in-module)
resync\core\pools\pool_manager.py:41:4: W0603: Using the global statement (global-statement)
resync\core\pools\pool_manager.py:44:41: W0212: Access to a protected member _initialized of a client class (protected-access)
resync\core\pools\pool_manager.py:50:45: W0212: Access to a protected member _initialized of a client class (protected-access)
resync\core\pools\pool_manager.py:57:15: W0212: Access to a protected member _initialized of a client class (protected-access)
resync\core\pools\pool_manager.py:69:4: W0603: Using the global statement (global-statement)
resync\core\pools\pool_manager.py:75:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\pool_manager.py:76:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\pool_manager.py:212:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\pool_manager.py:213:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\pools\pool_manager.py:229:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\pools\pool_manager.py:230:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module core.pools.redis_pool
resync\core\pools\redis_pool.py:29:0: C0115: Missing class docstring (missing-class-docstring)
resync\core\pools\redis_pool.py:35:4: C0116: Missing function or method docstring (missing-function-docstring)
resync\core\pools\redis_pool.py:43:16: W0621: Redefining name 'redis' from outer scope (line 12) (redefined-outer-name)
resync\core\pools\redis_pool.py:43:16: C0415: Import outside toplevel (redis.asyncio) (import-outside-toplevel)
resync\core\pools\redis_pool.py:29:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\core\pools\redis_pool.py:12:4: W0611: Unused redis.asyncio imported as redis (unused-import)
resync\core\pools\redis_pool.py:13:4: W0611: Unused Redis imported from redis.asyncio as AsyncRedis (unused-import)
resync\core\pools\redis_pool.py:14:4: W0611: Unused ConnectionError imported from redis.exceptions as RedisConnectionError (unused-import)
resync\core\pools\redis_pool.py:15:4: W0611: Unused RedisError imported from redis.exceptions (unused-import)
************* Module core.resilience.chucknorris_circuit_breaker
resync\core\resilience\chucknorris_circuit_breaker.py:61:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:64:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:70:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:74:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:84:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:90:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:97:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:102:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:106:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:111:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:130:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:134:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:139:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:143:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:148:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:150:0: C0301: Line too long (108/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:152:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:156:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:160:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:162:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:167:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:169:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:173:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:175:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:180:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:182:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:188:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:190:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:194:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:198:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:205:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:209:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:211:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:217:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:220:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:225:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:230:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:236:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:237:0: C0301: Line too long (104/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:240:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:244:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:251:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:256:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:261:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:263:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:267:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:272:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:279:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:282:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:285:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:310:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:314:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:325:0: C0301: Line too long (113/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:332:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:334:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:342:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:345:0: C0301: Line too long (110/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:349:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:350:0: C0301: Line too long (113/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:359:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:366:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:373:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:376:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:380:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:385:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:390:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:395:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:400:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:405:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:412:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:413:0: C0301: Line too long (116/100) (line-too-long)
resync\core\resilience\chucknorris_circuit_breaker.py:414:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:419:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:434:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:439:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:442:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:446:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:448:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:453:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:456:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:461:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:466:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:468:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:473:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:476:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:480:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:485:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:488:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:495:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:499:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:502:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:513:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:518:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:521:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:524:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:528:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:531:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:547:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:552:0: C0303: Trailing whitespace (trailing-whitespace)
resync\core\resilience\chucknorris_circuit_breaker.py:56:0: R0902: Too many instance attributes (13/7) (too-many-instance-attributes)
resync\core\resilience\chucknorris_circuit_breaker.py:82:0: R0902: Too many instance attributes (21/7) (too-many-instance-attributes)
resync\core\resilience\chucknorris_circuit_breaker.py:119:0: R0902: Too many instance attributes (15/7) (too-many-instance-attributes)
resync\core\resilience\chucknorris_circuit_breaker.py:161:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:174:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:189:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:224:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:229:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:235:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:315:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
resync\core\resilience\chucknorris_circuit_breaker.py:328:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:311:4: R0911: Too many return statements (7/6) (too-many-return-statements)
resync\core\resilience\chucknorris_circuit_breaker.py:371:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\resilience\chucknorris_circuit_breaker.py:372:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:379:8: W0612: Unused variable 'current_time' (unused-variable)
resync\core\resilience\chucknorris_circuit_breaker.py:410:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\resilience\chucknorris_circuit_breaker.py:411:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:413:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:420:8: R1705: Unnecessary "elif" after "return", remove the leading "el" from "elif" (no-else-return)
resync\core\resilience\chucknorris_circuit_breaker.py:415:4: R0911: Too many return statements (7/6) (too-many-return-statements)
resync\core\resilience\chucknorris_circuit_breaker.py:511:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\core\resilience\chucknorris_circuit_breaker.py:512:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:553:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\core\resilience\chucknorris_circuit_breaker.py:562:4: W0107: Unnecessary pass statement (unnecessary-pass)
resync\core\resilience\chucknorris_circuit_breaker.py:19:0: W0611: Unused import math (unused-import)
************* Module fastapi_app.main
resync\fastapi_app\main.py:124:1: W0511: TODO: Uncomment when import issues are resolved (fixme)
resync\fastapi_app\main.py:27:19: W0621: Redefining name 'app' from outer scope (line 35) (redefined-outer-name)
resync\fastapi_app\main.py:27:19: W0613: Unused argument 'app' (unused-argument)
************* Module models.error_models
resync\models\error_models.py:190:0: C0301: Line too long (102/100) (line-too-long)
resync\models\error_models.py:265:0: C0301: Line too long (102/100) (line-too-long)
resync\models\error_models.py:305:0: C0301: Line too long (105/100) (line-too-long)
resync\models\error_models.py:419:0: C0301: Line too long (109/100) (line-too-long)
resync\models\error_models.py:459:0: C0301: Line too long (120/100) (line-too-long)
resync\models\error_models.py:495:0: C0301: Line too long (109/100) (line-too-long)
resync\models\error_models.py:513:0: C0301: Line too long (109/100) (line-too-long)
resync\models\error_models.py:243:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\models\error_models.py:243:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\models\error_models.py:294:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\models\error_models.py:294:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\models\error_models.py:333:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\models\error_models.py:333:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\models\error_models.py:441:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\models\error_models.py:441:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\models\error_models.py:480:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\models\error_models.py:480:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\models\error_models.py:493:12: W0621: Redefining name 'datetime' from outer scope (line 3) (redefined-outer-name)
resync\models\error_models.py:493:12: W0404: Reimport 'datetime' (imported line 3) (reimported)
resync\models\error_models.py:493:12: C0415: Import outside toplevel (datetime.datetime, datetime.timedelta) (import-outside-toplevel)
************* Module models.health_models
resync\models\health_models.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\models\health_models.py:43:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
resync\models\health_models.py:72:0: R0902: Too many instance attributes (28/7) (too-many-instance-attributes)
resync\models\health_models.py:175:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
************* Module models.tws
resync\models\tws.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module services.http_client_factory
resync\services\http_client_factory.py:20:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\services\http_client_factory.py:23:0: R0913: Too many arguments (9/5) (too-many-arguments)
resync\services\http_client_factory.py:23:0: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
resync\services\http_client_factory.py:96:0: C0116: Missing function or method docstring (missing-function-docstring)
resync\services\http_client_factory.py:20:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party import "resync.core.constants.DEFAULT_CONNECT_TIMEOUT"  (wrong-import-order)
************* Module services.llm_service
resync\services\llm_service.py:15:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\services\llm_service.py:16:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\services\llm_service.py:43:0: R0903: Too few public methods (0/2) (too-few-public-methods)
resync\services\llm_service.py:94:8: C0415: Import outside toplevel (time) (import-outside-toplevel)
resync\services\llm_service.py:107:8: C0415: Import outside toplevel (time) (import-outside-toplevel)
resync\services\llm_service.py:114:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\llm_service.py:143:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
************* Module services.mock_tws_service
resync\services\mock_tws_service.py:375:0: C0301: Line too long (112/100) (line-too-long)
resync\services\mock_tws_service.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\services\mock_tws_service.py:41:0: W0613: Unused argument 'args' (unused-argument)
resync\services\mock_tws_service.py:41:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\services\mock_tws_service.py:64:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\mock_tws_service.py:86:15: E0701: Bad except clauses order (OSError is an ancestor class of FileNotFoundError) (bad-except-order)
resync\services\mock_tws_service.py:92:15: E0701: Bad except clauses order (OSError is an ancestor class of PermissionError) (bad-except-order)
resync\services\mock_tws_service.py:108:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\mock_tws_service.py:181:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\mock_tws_service.py:182:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\mock_tws_service.py:204:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\mock_tws_service.py:205:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\mock_tws_service.py:226:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\mock_tws_service.py:227:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\mock_tws_service.py:433:34: W0613: Unused argument 'last_hours' (unused-argument)
resync\services\mock_tws_service.py:539:8: W0613: Unused argument 'user' (unused-argument)
resync\services\mock_tws_service.py:540:8: W0613: Unused argument 'password' (unused-argument)
************* Module services.rag_client
resync\services\rag_client.py:15:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\services\rag_client.py:16:0: E0401: Unable to import 'resync_new.utils.simple_logger' (import-error)
resync\services\rag_client.py:85:12: W0719: Raising too general exception: Exception (broad-exception-raised)
resync\services\rag_client.py:123:12: W0719: Raising too general exception: Exception (broad-exception-raised)
resync\services\rag_client.py:15:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party import "resync.core.resilience.CircuitBreakerManager"  (wrong-import-order)
resync\services\rag_client.py:16:0: C0411: third party import "resync_new.utils.simple_logger.get_logger" should be placed before first party import "resync.core.resilience.CircuitBreakerManager"  (wrong-import-order)
************* Module services.tws_client_factory
resync\services\tws_client_factory.py:60:0: C0325: Unnecessary parens after 'not' keyword (superfluous-parens)
resync\services\tws_client_factory.py:26:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\services\tws_client_factory.py:30:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\services\tws_client_factory.py:34:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\services\tws_client_factory.py:38:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\services\tws_client_factory.py:42:0: R0902: Too many instance attributes (10/7) (too-many-instance-attributes)
resync\services\tws_client_factory.py:145:21: E1101: Instance of 'OptimizedTWSClient' has no 'execute_command' member (no-member)
resync\services\tws_client_factory.py:153:21: E1101: Instance of 'OptimizedTWSClient' has no 'get_job_status' member; maybe 'get_jobs_status'? (no-member)
************* Module services.tws_service
resync\services\tws_service.py:470:0: C0301: Line too long (108/100) (line-too-long)
resync\services\tws_service.py:544:0: C0301: Line too long (118/100) (line-too-long)
resync\services\tws_service.py:622:0: C0301: Line too long (112/100) (line-too-long)
resync\services\tws_service.py:730:0: C0301: Line too long (121/100) (line-too-long)
resync\services\tws_service.py:840:0: C0301: Line too long (106/100) (line-too-long)
resync\services\tws_service.py:995:0: C0301: Line too long (124/100) (line-too-long)
resync\services\tws_service.py:1005:0: C0301: Line too long (107/100) (line-too-long)
resync\services\tws_service.py:1053:0: C0301: Line too long (108/100) (line-too-long)
resync\services\tws_service.py:1:0: C0302: Too many lines in module (1222/1000) (too-many-lines)
resync\services\tws_service.py:25:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\services\tws_service.py:26:0: E0401: Unable to import 'resync_new.core.connection_pool_manager' (import-error)
resync\services\tws_service.py:27:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\services\tws_service.py:70:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)
resync\services\tws_service.py:76:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\services\tws_service.py:76:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\services\tws_service.py:205:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError(f'HTTP error: {e.response.status_code}', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:210:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError(f'Network error during API request: {e.request.url}', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:219:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError('An unexpected error occurred', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:262:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError('TWS server ping timed out', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:266:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:267:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError('TWS server unreachable', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:271:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:272:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError('TWS ping failed unexpectedly', original_exception=e) from e' (raise-missing-from)
resync\services\tws_service.py:437:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:441:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:445:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:467:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:478:27: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:479:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:487:27: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:488:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:541:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:585:35: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:561:43: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:549:16: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
resync\services\tws_service.py:567:43: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:586:32: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:549:16: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
resync\services\tws_service.py:619:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:674:31: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:684:31: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:727:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:804:35: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:805:32: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:872:35: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:854:43: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:873:32: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:845:16: R1702: Too many nested blocks (6/5) (too-many-nested-blocks)
resync\services\tws_service.py:918:31: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:973:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1008:27: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:1004:28: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1009:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1023:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1045:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1081:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1082:12: W0707: Consider explicitly re-raising using 'except Exception as exc' and 'raise TWSConnectionError(f'Timeout getting job status for {job_id}') from exc' (raise-missing-from)
resync\services\tws_service.py:1086:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1087:12: W0707: Consider explicitly re-raising using 'raise TWSConnectionError(f'Error getting job status for {job_id}: {e}') from e' (raise-missing-from)
resync\services\tws_service.py:1168:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:1137:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1148:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1158:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1169:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1175:23: W0718: Catching too general exception Exception (broad-exception-caught)
resync\services\tws_service.py:1175:16: W0621: Redefining name 'e' from outer scope (line 1168) (redefined-outer-name)
resync\services\tws_service.py:1177:20: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\services\tws_service.py:1189:14: E1101: Instance of 'CacheHierarchy' has no 'delete_pattern' member (no-member)
resync\services\tws_service.py:1195:14: E1101: Instance of 'CacheHierarchy' has no 'delete_pattern' member (no-member)
resync\services\tws_service.py:1201:14: E1101: Instance of 'CacheHierarchy' has no 'delete_pattern' member (no-member)
resync\services\tws_service.py:70:0: R0904: Too many public methods (22/20) (too-many-public-methods)
resync\services\tws_service.py:25:0: C0411: third party import "resync_new.config.settings.settings" should be placed before first party imports "resync.core.cache_hierarchy.get_cache_hierarchy", "resync.core.resilience.CircuitBreakerError"  (wrong-import-order)
resync\services\tws_service.py:26:0: C0411: third party import "resync_new.core.connection_pool_manager.get_connection_pool_manager" should be placed before first party imports "resync.core.cache_hierarchy.get_cache_hierarchy", "resync.core.resilience.CircuitBreakerError"  (wrong-import-order)
resync\services\tws_service.py:27:0: C0411: third party import "resync_new.utils.exceptions.TWSConnectionError" should be placed before first party imports "resync.core.cache_hierarchy.get_cache_hierarchy", "resync.core.resilience.CircuitBreakerError"  (wrong-import-order)
resync\services\tws_service.py:29:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module utils.common_error_handlers
resync\utils\common_error_handlers.py:15:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\common_error_handlers.py:39:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\common_error_handlers.py:40:16: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\common_error_handlers.py:40:16: C0415: Import outside toplevel (exceptions.ParsingError) (import-outside-toplevel)
resync\utils\common_error_handlers.py:65:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\common_error_handlers.py:66:16: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\common_error_handlers.py:66:16: C0415: Import outside toplevel (exceptions.LLMError) (import-outside-toplevel)
resync\utils\common_error_handlers.py:93:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\common_error_handlers.py:106:4: W0621: Redefining name 'logger' from outer scope (line 17) (redefined-outer-name)
resync\utils\common_error_handlers.py:150:28: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\common_error_handlers.py:176:24: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\common_error_handlers.py:208:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
************* Module utils.error_factories
resync\utils\error_factories.py:24:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\utils\error_factories.py:30:0: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\utils\error_factories.py:42:4: C0415: Import outside toplevel (resync.core.utils.error_utils.ErrorResponseBuilder) (import-outside-toplevel)
resync\utils\error_factories.py:49:4: C0415: Import outside toplevel (resync.core.utils.error_utils.generate_correlation_id) (import-outside-toplevel)
resync\utils\error_factories.py:56:4: C0415: Import outside toplevel (resync.core.utils.error_utils.should_include_stack_trace) (import-outside-toplevel)
resync\utils\error_factories.py:65:4: R0911: Too many return statements (7/6) (too-many-return-statements)
resync\utils\error_factories.py:61:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:136:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:224:8: W0613: Unused argument 'exception' (unused-argument)
resync\utils\error_factories.py:225:8: W0613: Unused argument 'is_production' (unused-argument)
resync\utils\error_factories.py:218:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:237:8: W0613: Unused argument 'exception' (unused-argument)
resync\utils\error_factories.py:238:8: W0613: Unused argument 'is_production' (unused-argument)
resync\utils\error_factories.py:231:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:250:8: W0613: Unused argument 'exception' (unused-argument)
resync\utils\error_factories.py:251:8: W0613: Unused argument 'is_production' (unused-argument)
resync\utils\error_factories.py:244:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:263:8: W0613: Unused argument 'exception' (unused-argument)
resync\utils\error_factories.py:264:8: W0613: Unused argument 'is_production' (unused-argument)
resync\utils\error_factories.py:257:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:272:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:288:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_factories.py:304:0: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\error_factories.py:304:0: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\error_factories.py:313:4: W0621: Redefining name 'EnhancedNotFoundError' from outer scope (line 15) (redefined-outer-name)
resync\utils\error_factories.py:313:4: W0404: Reimport 'NotFoundError' (imported line 15) (reimported)
resync\utils\error_factories.py:313:4: C0415: Import outside toplevel (resync.core.exceptions_enhanced.NotFoundError) (import-outside-toplevel)
resync\utils\error_factories.py:307:4: W0613: Unused argument 'message' (unused-argument)
resync\utils\error_factories.py:310:4: W0613: Unused argument 'is_production' (unused-argument)
resync\utils\error_factories.py:335:4: C0415: Import outside toplevel (resync.core.utils.error_utils.ErrorSanitizer) (import-outside-toplevel)
resync\utils\error_factories.py:24:0: C0411: third party import "resync_new.utils.exceptions.DatabaseError" should be placed before first party imports "resync.core.exceptions_enhanced.DatabaseError", "resync.core.exceptions_enhanced.LLMError", "resync.core.exceptions_enhanced.NotFoundError", "resync.core.exceptions_enhanced.ResyncException", "resync.core.exceptions_enhanced.TWSConnectionError"  (wrong-import-order)
resync\utils\error_factories.py:30:0: C0411: third party import "resync_new.utils.exceptions.ResyncException" should be placed before first party imports "resync.core.exceptions_enhanced.DatabaseError", "resync.core.exceptions_enhanced.LLMError", "resync.core.exceptions_enhanced.NotFoundError", "resync.core.exceptions_enhanced.ResyncException", "resync.core.exceptions_enhanced.TWSConnectionError"  (wrong-import-order)
resync\utils\error_factories.py:34:0: C0412: Imports from package resync are not grouped (ungrouped-imports)
************* Module utils.error_utils
resync\utils\error_utils.py:331:0: C0301: Line too long (114/100) (line-too-long)
resync\utils\error_utils.py:15:0: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\utils\error_utils.py:306:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\error_utils.py:313:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\error_utils.py:320:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\error_utils.py:322:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\error_utils.py:341:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\error_utils.py:428:4: W0621: Redefining name 'RequestValidationError' from outer scope (line 12) (redefined-outer-name)
resync\utils\error_utils.py:428:4: W0404: Reimport 'RequestValidationError' (imported line 12) (reimported)
resync\utils\error_utils.py:428:4: C0415: Import outside toplevel (fastapi.exceptions.RequestValidationError) (import-outside-toplevel)
resync\utils\error_utils.py:429:4: C0415: Import outside toplevel (resync.core.exceptions_enhanced.ResyncException) (import-outside-toplevel)
resync\utils\error_utils.py:432:4: E0401: Unable to import 'resync_new.utils.exceptions' (import-error)
resync\utils\error_utils.py:432:4: C0415: Import outside toplevel (resync_new.utils.exceptions.ResyncException) (import-outside-toplevel)
resync\utils\error_utils.py:435:4: C0415: Import outside toplevel (starlette.exceptions.HTTPException) (import-outside-toplevel)
resync\utils\error_utils.py:531:4: C0415: Import outside toplevel (error_factories.ErrorFactory) (import-outside-toplevel)
************* Module utils.exceptions
resync\utils\exceptions.py:1:0: C0302: Too many lines in module (1346/1000) (too-many-lines)
resync\utils\exceptions.py:505:0: W0622: Redefining built-in 'TimeoutError' (redefined-builtin)
resync\utils\exceptions.py:118:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)
resync\utils\exceptions.py:140:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\utils\exceptions.py:140:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\utils\exceptions.py:281:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\utils\exceptions.py:281:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\utils\exceptions.py:362:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:362:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:421:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:421:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:451:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:451:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:481:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:481:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:511:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:511:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:543:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:543:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:570:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:570:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:591:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:591:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:691:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:691:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:716:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:716:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:763:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:763:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:790:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:790:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:817:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:817:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:838:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\utils\exceptions.py:838:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\utils\exceptions.py:912:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:912:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:939:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:939:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:966:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:966:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:992:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:992:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1063:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:1063:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1091:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:1091:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1118:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:1118:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1131:8: E1123: Unexpected keyword argument 'error_code' in method call (unexpected-keyword-arg)
resync\utils\exceptions.py:1131:8: E1123: Unexpected keyword argument 'status_code' in method call (unexpected-keyword-arg)
resync\utils\exceptions.py:1131:8: E1123: Unexpected keyword argument 'severity' in method call (unexpected-keyword-arg)
resync\utils\exceptions.py:1145:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:1145:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1179:4: R0913: Too many arguments (8/5) (too-many-arguments)
resync\utils\exceptions.py:1179:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\utils\exceptions.py:1212:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\exceptions.py:1212:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
************* Module utils.executors
resync\utils\executors.py:27:8: W0201: Attribute 'cpu_pool' defined outside __init__ (attribute-defined-outside-init)
resync\utils\executors.py:33:8: W0201: Attribute 'io_pool' defined outside __init__ (attribute-defined-outside-init)
resync\utils\executors.py:39:8: W0201: Attribute 'large_file_pool' defined outside __init__ (attribute-defined-outside-init)
************* Module utils.interfaces
resync\utils\interfaces.py:18:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:22:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:32:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:42:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:48:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:54:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:64:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:74:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:80:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:86:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:92:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:98:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:102:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:106:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:110:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:114:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:118:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:122:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:126:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:130:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:136:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:142:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:146:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:150:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:156:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:162:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:166:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:170:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:175:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:10:0: R0904: Too many public methods (29/20) (too-many-public-methods)
resync\utils\interfaces.py:189:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:193:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:202:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:206:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:210:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:219:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:223:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:227:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:233:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:242:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:246:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:250:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:254:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:258:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:262:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:266:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:270:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:274:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:278:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:287:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:291:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:295:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:299:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:303:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:308:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:318:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:322:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:326:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:330:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:334:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
resync\utils\interfaces.py:340:8: W2301: Unnecessary ellipsis constant (unnecessary-ellipsis)
************* Module utils.json_commands
resync\utils\json_commands.py:12:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\json_commands.py:89:12: W0707: Consider explicitly re-raising using 'raise ParsingError(f'Invalid JSON format: {str(e)}') from e' (raise-missing-from)
resync\utils\json_commands.py:71:8: W0201: Attribute 'json_str' defined outside __init__ (attribute-defined-outside-init)
resync\utils\json_commands.py:22:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\json_commands.py:136:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\json_commands.py:150:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module utils.json_parser
resync\utils\json_parser.py:1:0: C0114: Missing module docstring (missing-module-docstring)
************* Module utils.llm
resync\utils\llm.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\llm.py:9:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm.py:10:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm.py:11:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm.py:36:0: R0913: Too many arguments (9/5) (too-many-arguments)
resync\utils\llm.py:36:0: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
************* Module utils.llm_factories
resync\utils\llm_factories.py:63:0: C0301: Line too long (108/100) (line-too-long)
resync\utils\llm_factories.py:21:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm_factories.py:22:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm_factories.py:23:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\llm_factories.py:32:4: R0913: Too many arguments (9/5) (too-many-arguments)
resync\utils\llm_factories.py:32:4: R0917: Too many positional arguments (8/5) (too-many-positional-arguments)
resync\utils\llm_factories.py:32:4: R0914: Too many local variables (19/15) (too-many-locals)
resync\utils\llm_factories.py:53:12: C0415: Import outside toplevel (resync.core.litellm_init.get_litellm_router) (import-outside-toplevel)
resync\utils\llm_factories.py:116:12: W0707: Consider explicitly re-raising using 'except Exception as exc' and 'raise LLMError(f'LLM call timed out after {timeout} seconds') from exc' (raise-missing-from)
resync\utils\llm_factories.py:119:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Content policy violation: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:122:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Context window exceeded: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:125:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Authentication error: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:128:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Rate limit exceeded: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:131:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Invalid request: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:134:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'API error: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:137:12: W0707: Consider explicitly re-raising using 'raise LLMError(f'Unexpected error: {str(e)}') from e' (raise-missing-from)
resync\utils\llm_factories.py:32:4: R0912: Too many branches (14/12) (too-many-branches)
resync\utils\llm_factories.py:32:4: R0915: Too many statements (58/50) (too-many-statements)
resync\utils\llm_factories.py:37:8: W0613: Unused argument 'max_retries' (unused-argument)
resync\utils\llm_factories.py:28:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:140:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:155:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:178:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:187:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:196:0: R0903: Too few public methods (1/2) (too-few-public-methods)
resync\utils\llm_factories.py:205:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module utils.resource_managers
resync\utils\resource_managers.py:183:0: C0301: Line too long (123/100) (line-too-long)
resync\utils\resource_managers.py:49:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:52:4: W0237: Parameter 'resource' has been renamed to 'client' in overriding 'LLMResourceManager.release' method (arguments-renamed)
resync\utils\resource_managers.py:60:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:61:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:63:4: W0237: Parameter 'resource' has been renamed to 'client' in overriding 'LLMResourceManager.health_check' method (arguments-renamed)
resync\utils\resource_managers.py:68:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:85:8: C0415: Import outside toplevel (resync.core.utils.llm.create_llm_client) (import-outside-toplevel)
resync\utils\resource_managers.py:85:8: E0611: No name 'create_llm_client' in module 'resync.core.utils.llm' (no-name-in-module)
resync\utils\resource_managers.py:96:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:119:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:126:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:127:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:143:19: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)
resync\utils\resource_managers.py:146:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:153:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:152:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:154:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:172:12: C0415: Import outside toplevel (aiohttp) (import-outside-toplevel)
resync\utils\resource_managers.py:174:12: E0102: function already defined line 159 (function-redefined)
resync\utils\resource_managers.py:179:16: C0415: Import outside toplevel (httpx) (import-outside-toplevel)
resync\utils\resource_managers.py:181:16: C0103: Variable name "DEFAULT_TIMEOUT" doesn't conform to snake_case naming style (invalid-name)
resync\utils\resource_managers.py:182:16: C0103: Variable name "DEFAULT_LIMITS" doesn't conform to snake_case naming style (invalid-name)
resync\utils\resource_managers.py:183:34: C3001: Lambda expression assigned to a variable. Define a function using the "def" keyword instead. (unnecessary-lambda-assignment)
resync\utils\resource_managers.py:186:16: W0707: Consider explicitly re-raising using 'except ImportError as exc' and 'raise ImportError('No HTTP client library available. Install aiohttp or httpx.') from exc' (raise-missing-from)
resync\utils\resource_managers.py:195:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:202:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:203:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:271:15: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:272:12: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:290:19: W0718: Catching too general exception Exception (broad-exception-caught)
resync\utils\resource_managers.py:291:16: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)
resync\utils\resource_managers.py:299:4: C0415: Import outside toplevel (resync.core.utils.llm.create_llm_client) (import-outside-toplevel)
resync\utils\resource_managers.py:299:4: E0611: No name 'create_llm_client' in module 'resync.core.utils.llm' (no-name-in-module)
resync\utils\resource_managers.py:312:4: C0115: Missing class docstring (missing-class-docstring)
resync\utils\resource_managers.py:319:8: W0237: Parameter 'resource' has been renamed to 'conn' in overriding 'DatabaseResourceManager.release' method (arguments-renamed)
resync\utils\resource_managers.py:322:8: W0237: Parameter 'resource' has been renamed to 'conn' in overriding 'DatabaseResourceManager.health_check' method (arguments-renamed)
resync\utils\resource_managers.py:328:19: W0718: Catching too general exception Exception (broad-exception-caught)
************* Module utils.simple_logger
resync\utils\simple_logger.py:26:4: E0401: Unable to import 'resync_new.config.settings' (import-error)
resync\utils\simple_logger.py:26:4: C0415: Import outside toplevel (resync_new.config.settings.settings) (import-outside-toplevel)
resync\utils\simple_logger.py:258:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:283:4: R0913: Too many arguments (9/5) (too-many-arguments)
resync\utils\simple_logger.py:283:4: R0917: Too many positional arguments (9/5) (too-many-positional-arguments)
resync\utils\simple_logger.py:289:8: W0613: Unused argument 'request_size' (unused-argument)
resync\utils\simple_logger.py:290:8: W0613: Unused argument 'response_size' (unused-argument)
resync\utils\simple_logger.py:291:8: W0613: Unused argument 'user_agent' (unused-argument)
resync\utils\simple_logger.py:284:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:312:8: W0613: Unused argument 'query' (unused-argument)
resync\utils\simple_logger.py:308:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:325:4: R0913: Too many arguments (7/5) (too-many-arguments)
resync\utils\simple_logger.py:325:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)
resync\utils\simple_logger.py:331:8: W0613: Unused argument 'request_size' (unused-argument)
resync\utils\simple_logger.py:332:8: W0613: Unused argument 'response_size' (unused-argument)
resync\utils\simple_logger.py:326:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:346:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:360:4: R0913: Too many arguments (6/5) (too-many-arguments)
resync\utils\simple_logger.py:360:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)
resync\utils\simple_logger.py:361:0: W0613: Unused argument 'kwargs' (unused-argument)
resync\utils\simple_logger.py:388:0: R0903: Too few public methods (1/2) (too-few-public-methods)
************* Module utils.test_agent_manager
resync\utils\test_agent_manager.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\test_agent_manager.py:6:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_agent_manager.py:7:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_agent_manager.py:17:4: W0212: Access to a protected member _instance of a client class (protected-access)
resync\utils\test_agent_manager.py:21:55: W0621: Redefining name 'agent_manager' from outer scope (line 14) (redefined-outer-name)
resync\utils\test_agent_manager.py:33:4: W0621: Redefining name 'agent_manager' from outer scope (line 14) (redefined-outer-name)
resync\utils\test_agent_manager.py:46:4: W0621: Redefining name 'agent_manager' from outer scope (line 14) (redefined-outer-name)
resync\utils\test_agent_manager.py:62:4: W0621: Redefining name 'agent_manager' from outer scope (line 14) (redefined-outer-name)
************* Module utils.test_ia_auditor
resync\utils\test_ia_auditor.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\test_ia_auditor.py:5:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_ia_auditor.py:6:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_ia_auditor.py:29:45: W0621: Redefining name 'sample_memory' from outer scope (line 13) (redefined-outer-name)
resync\utils\test_ia_auditor.py:29:19: W0613: Unused argument 'mock_validate' (unused-argument)
resync\utils\test_ia_auditor.py:50:15: W0621: Redefining name 'sample_memory' from outer scope (line 13) (redefined-outer-name)
resync\utils\test_ia_auditor.py:72:30: W0621: Redefining name 'sample_memory' from outer scope (line 13) (redefined-outer-name)
resync\utils\test_ia_auditor.py:94:16: W0613: Unused argument 'caplog' (unused-argument)
************* Module utils.test_json_parser
resync\utils\test_json_parser.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\test_json_parser.py:3:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
************* Module utils.test_llm
resync\utils\test_llm.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\test_llm.py:5:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
************* Module utils.test_tws_tools
resync\utils\test_tws_tools.py:1:0: C0114: Missing module docstring (missing-module-docstring)
resync\utils\test_tws_tools.py:5:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_tws_tools.py:9:0: E0402: Attempted relative import beyond top-level package (relative-beyond-top-level)
resync\utils\test_tws_tools.py:30:60: W0621: Redefining name 'mock_tws_client' from outer scope (line 21) (redefined-outer-name)
resync\utils\test_tws_tools.py:49:4: W0621: Redefining name 'mock_tws_client' from outer scope (line 21) (redefined-outer-name)
resync\utils\test_tws_tools.py:67:4: W0621: Redefining name 'mock_tws_client' from outer scope (line 21) (redefined-outer-name)
************* Module utils.validation
resync\utils\validation.py:201:0: C0301: Line too long (101/100) (line-too-long)
resync\utils\validation.py:142:8: C0415: Import outside toplevel (os) (import-outside-toplevel)
resync\utils\validation.py:247:4: C0415: Import outside toplevel (fastapi.Request) (import-outside-toplevel)
resync\utils\validation.py:248:4: C0415: Import outside toplevel (fastapi.responses.JSONResponse) (import-outside-toplevel)
resync\utils\validation.py:272:8: W0706: The except handler raises immediately (try-except-raise)
************* Module utils.__init__
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[15:1346]
==utils.exceptions:[15:1346]
class ErrorCode(str, Enum):
    """C¾digos de erro padronizados da aplicaþÒo.

    Seguem o padrÒo de nomenclatura SCREAMING_SNAKE_CASE e sÒo agrupados
    por categoria para facilitar identificaþÒo e tratamento.
    """

    # Erros de ValidaþÒo (400)
    VALIDATION_ERROR = "VALIDATION_ERROR"
    INVALID_INPUT = "INVALID_INPUT"
    MISSING_REQUIRED_FIELD = "MISSING_REQUIRED_FIELD"
    INVALID_FORMAT = "INVALID_FORMAT"

    # Erros de AutenticaþÒo (401)
    AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED"
    INVALID_CREDENTIALS = "INVALID_CREDENTIALS"
    TOKEN_EXPIRED = "TOKEN_EXPIRED"
    TOKEN_INVALID = "TOKEN_INVALID"

    # Erros de AutorizaþÒo (403)
    AUTHORIZATION_FAILED = "AUTHORIZATION_FAILED"
    INSUFFICIENT_PERMISSIONS = "INSUFFICIENT_PERMISSIONS"
    ACCESS_DENIED = "ACCESS_DENIED"

    # Erros de Recurso (404)
    RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND"
    ENDPOINT_NOT_FOUND = "ENDPOINT_NOT_FOUND"

    # Erros de Conflito (409)
    RESOURCE_CONFLICT = "RESOURCE_CONFLICT"
    DUPLICATE_RESOURCE = "DUPLICATE_RESOURCE"

    # Erros de Neg¾cio (422)
    BUSINESS_RULE_VIOLATION = "BUSINESS_RULE_VIOLATION"
    INVALID_STATE_TRANSITION = "INVALID_STATE_TRANSITION"
    OPERATION_NOT_ALLOWED = "OPERATION_NOT_ALLOWED"

    # Erros de Rate Limiting (429)
    RATE_LIMIT_EXCEEDED = "RATE_LIMIT_EXCEEDED"
    QUOTA_EXCEEDED = "QUOTA_EXCEEDED"

    # Erros de Servidor (500)
    INTERNAL_ERROR = "INTERNAL_ERROR"
    UNHANDLED_EXCEPTION = "UNHANDLED_EXCEPTION"

    # Erros de IntegraþÒo (502)
    INTEGRATION_ERROR = "INTEGRATION_ERROR"
    EXTERNAL_SERVICE_ERROR = "EXTERNAL_SERVICE_ERROR"
    TWS_CONNECTION_ERROR = "TWS_CONNECTION_ERROR"
    LLM_ERROR = "LLM_ERROR"

    # Erros de Disponibilidade (503)
    SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE"
    CIRCUIT_BREAKER_OPEN = "CIRCUIT_BREAKER_OPEN"
    MAINTENANCE_MODE = "MAINTENANCE_MODE"

    # Erros de Timeout (504)
    GATEWAY_TIMEOUT = "GATEWAY_TIMEOUT"
    OPERATION_TIMEOUT = "OPERATION_TIMEOUT"

    # Erros de Banco de Dados
    DATABASE_ERROR = "DATABASE_ERROR"
    DATABASE_CONNECTION_ERROR = "DATABASE_CONNECTION_ERROR"
    DATABASE_QUERY_ERROR = "DATABASE_QUERY_ERROR"

    # Erros de Cache
    CACHE_ERROR = "CACHE_ERROR"
    CACHE_MISS = "CACHE_MISS"
    POOL_EXHAUSTED = "POOL_EXHAUSTED"

    # Erros de Redis
    REDIS_ERROR = "REDIS_ERROR"
    REDIS_CONNECTION_ERROR = "REDIS_CONNECTION_ERROR"
    REDIS_AUTH_ERROR = "REDIS_AUTH_ERROR"
    REDIS_TIMEOUT_ERROR = "REDIS_TIMEOUT_ERROR"
    REDIS_INITIALIZATION_ERROR = "REDIS_INITIALIZATION_ERROR"

    # Erros de ConfiguraþÒo
    CONFIGURATION_ERROR = "CONFIGURATION_ERROR"
    INVALID_CONFIGURATION = "INVALID_CONFIGURATION"
    MISSING_CONFIGURATION = "MISSING_CONFIGURATION"

    # Erros de Arquivo
    FILE_ERROR = "FILE_ERROR"
    FILE_NOT_FOUND = "FILE_NOT_FOUND"
    FILE_PROCESSING_ERROR = "FILE_PROCESSING_ERROR"

    # Erros de Rede
    NETWORK_ERROR = "NETWORK_ERROR"
    CONNECTION_ERROR = "CONNECTION_ERROR"
    WEBSOCKET_ERROR = "WEBSOCKET_ERROR"


class ErrorSeverity(str, Enum):
    """NÝveis de severidade para erros."""

    CRITICAL = "critical"  # Sistema inoperante, requer aþÒo imediata
    ERROR = "error"  # Funcionalidade comprometida
    WARNING = "warning"  # Problema potencial
    INFO = "info"  # InformaþÒo


class BaseAppException(Exception):
    """ExceþÒo base para todas as exceþ§es da aplicaþÒo.

    Fornece estrutura padronizada com:
    - C¾digo de erro
    - Status HTTP
    - Correlation ID para rastreamento
    - Contexto adicional
    - Severidade
    - Timestamp

    Attributes:
        message: Mensagem descritiva do erro
        error_code: C¾digo de erro padronizado
        status_code: C¾digo de status HTTP
        details: Dicionßrio com contexto adicional
        correlation_id: ID para rastreamento distribuÝdo
        severity: NÝvel de severidade do erro
        timestamp: Momento em que o erro ocorreu
        original_exception: ExceþÒo original que causou este erro
    """

    def __init__(
        self,
        message: str,
        error_code: ErrorCode = ErrorCode.INTERNAL_ERROR,
        status_code: int = 500,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        severity: ErrorSeverity = ErrorSeverity.ERROR,
        original_exception: Exception | None = None,
    ):
        """Inicializa a exceþÒo base.

        Args:
            message: Mensagem descritiva do erro
            error_code: C¾digo de erro padronizado
            status_code: C¾digo de status HTTP
            details: Contexto adicional (opcional)
            correlation_id: ID de correlaþÒo (opcional)
            severity: NÝvel de severidade
            original_exception: ExceþÒo original (opcional)
        """
        super().__init__(message)
        self.message = message
        self.error_code = error_code
        self.status_code = status_code
        self.details = details or {}
        self.correlation_id = correlation_id
        self.severity = severity
        self.timestamp = datetime.utcnow()
        self.original_exception = original_exception

    def to_dict(self) -> dict[str, Any]:
        """Converte a exceþÒo para dicionßrio.

        Returns:
            Dicionßrio com todos os atributos da exceþÒo
        """
        return {
            "message": self.message,
            "error_code": self.error_code.value,
            "status_code": self.status_code,
            "details": self.details,
            "correlation_id": self.correlation_id,
            "severity": self.severity.value,
            "timestamp": self.timestamp.isoformat(),
        }

    def __str__(self) -> str:
        """RepresentaþÒo em string da exceþÒo."""
        return (
            f"{self.__class__.__name__}("
            f"message='{self.message}', "
            f"error_code={self.error_code.value}, "
            f"status_code={self.status_code}, "
            f"correlation_id={self.correlation_id})"
        )


# ============================================================================
# EXCEÃıES DE CLIENTE (4xx) - Erros causados pelo cliente
# ============================================================================


class ValidationError(BaseAppException):
    """Erro de validaþÒo de dados de entrada.

    Usado quando os dados fornecidos pelo cliente nÒo passam na validaþÒo.
    """

    def __init__(
        self,
        message: str = "Validation failed",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.VALIDATION_ERROR,
            status_code=400,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class AuthenticationError(BaseAppException):
    """Erro de autenticaþÒo.

    Usado quando as credenciais sÒo invßlidas ou ausentes.
    """

    def __init__(
        self,
        message: str = "Authentication failed",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.AUTHENTICATION_FAILED,
            status_code=401,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class AuthorizationError(BaseAppException):
    """Erro de autorizaþÒo.

    Usado quando o usußrio autenticado nÒo tem permissÒo para a operaþÒo.
    """

    def __init__(
        self,
        message: str = "Authorization failed",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.AUTHORIZATION_FAILED,
            status_code=403,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class ResourceNotFoundError(BaseAppException):
    """Erro quando recurso nÒo Ú encontrado.

    Usado quando um recurso solicitado nÒo existe.
    """

    def __init__(
        self,
        message: str = "Resource not found",
        resource_type: str | None = None,
        resource_id: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if resource_type:
            details["resource_type"] = resource_type
        if resource_id:
            details["resource_id"] = resource_id

        super().__init__(
            message=message,
            error_code=ErrorCode.RESOURCE_NOT_FOUND,
            status_code=404,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.INFO,
            original_exception=original_exception,
        )


class ResourceConflictError(BaseAppException):
    """Erro de conflito de recurso.

    Usado quando hß conflito com o estado atual do recurso.
    """

    def __init__(
        self,
        message: str = "Resource conflict",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.RESOURCE_CONFLICT,
            status_code=409,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class BusinessError(BaseAppException):
    """Erro de regra de neg¾cio.

    Usado quando uma operaþÒo viola regras de neg¾cio.
    """

    def __init__(
        self,
        message: str = "Business rule violation",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.BUSINESS_RULE_VIOLATION,
            status_code=422,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class RateLimitError(BaseAppException):
    """Erro de limite de taxa excedido.

    Usado quando o cliente excede o limite de requisiþ§es permitido.
    """

    def __init__(
        self,
        message: str = "Rate limit exceeded",
        retry_after: int | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if retry_after:
            details["retry_after"] = retry_after

        super().__init__(
            message=message,
            error_code=ErrorCode.RATE_LIMIT_EXCEEDED,
            status_code=429,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


# ============================================================================
# EXCEÃıES DE SERVIDOR (5xx) - Erros internos do servidor
# ============================================================================


class InternalError(BaseAppException):
    """Erro interno do servidor.

    Usado para erros inesperados que nÒo se encaixam em outras categorias.
    """

    def __init__(
        self,
        message: str = "Internal server error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class IntegrationError(BaseAppException):
    """Erro de integraþÒo com serviþo externo.

    Usado quando hß falha na comunicaþÒo com serviþos externos.
    """

    def __init__(
        self,
        message: str = "External service integration error",
        service_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if service_name:
            details["service_name"] = service_name

        super().__init__(
            message=message,
            error_code=ErrorCode.INTEGRATION_ERROR,
            status_code=502,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class ServiceUnavailableError(BaseAppException):
    """Erro de serviþo indisponÝvel.

    Usado quando o serviþo estß temporariamente indisponÝvel.
    """

    def __init__(
        self,
        message: str = "Service temporarily unavailable",
        retry_after: int | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if retry_after:
            details["retry_after"] = retry_after

        super().__init__(
            message=message,
            error_code=ErrorCode.SERVICE_UNAVAILABLE,
            status_code=503,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class CircuitBreakerError(BaseAppException):
    """Erro quando circuit breaker estß aberto.

    Usado quando o circuit breaker impede chamadas a um serviþo com falhas.
    """

    def __init__(
        self,
        message: str = "Circuit breaker is open",
        service_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if service_name:
            details["service_name"] = service_name

        super().__init__(
            message=message,
            error_code=ErrorCode.CIRCUIT_BREAKER_OPEN,
            status_code=503,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class TimeoutError(BaseAppException):
    """Erro de timeout.

    Usado quando uma operaþÒo excede o tempo limite.
    """

    def __init__(
        self,
        message: str = "Operation timeout",
        timeout_seconds: float | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if timeout_seconds:
            details["timeout_seconds"] = timeout_seconds

        super().__init__(
            message=message,
            error_code=ErrorCode.OPERATION_TIMEOUT,
            status_code=504,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


# ============================================================================
# EXCEÃıES ESPEC═FICAS DO DOM═NIO
# ============================================================================


class ConfigurationError(BaseAppException):
    """Erro de configuraþÒo."""

    def __init__(
        self,
        message: str = "Configuration error",
        config_key: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if config_key:
            details["config_key"] = config_key

        super().__init__(
            message=message,
            error_code=ErrorCode.CONFIGURATION_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.CRITICAL,
            original_exception=original_exception,
        )


class InvalidConfigError(ConfigurationError):
    """ExceþÒo para erros de dados de configuraþÒo invßlidos."""

    def __init__(
        self,
        message: str = "Invalid configuration",
        config_key: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            config_key=config_key,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.INVALID_CONFIGURATION


class MissingConfigError(ConfigurationError):
    """ExceþÒo para quando um arquivo de configuraþÒo nÒo Ú encontrado."""

    def __init__(
        self,
        message: str = "Missing configuration",
        config_key: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            config_key=config_key,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.MISSING_CONFIGURATION


class RedisError(BaseAppException):
    """ExceþÒo base para erros relacionados ao Redis."""

    def __init__(
        self,
        message: str = "Redis error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.REDIS_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class RedisInitializationError(RedisError):
    """Erro ao inicializar Redis."""

    def __init__(
        self,
        message: str = "Redis initialization error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.REDIS_INITIALIZATION_ERROR
        self.severity = ErrorSeverity.CRITICAL


class RedisConnectionError(RedisInitializationError):
    """Erro de conexÒo ao Redis."""

    def __init__(
        self,
        message: str = "Redis connection error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.REDIS_CONNECTION_ERROR


class RedisAuthError(RedisInitializationError):
    """Erro de autenticaþÒo Redis."""

    def __init__(
        self,
        message: str = "Redis authentication error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.REDIS_AUTH_ERROR


class RedisTimeoutError(RedisInitializationError):
    """Timeout em operaþÒo Redis."""

    def __init__(
        self,
        message: str = "Redis timeout error",
        timeout_seconds: float | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if timeout_seconds:
            details["timeout_seconds"] = timeout_seconds

        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.REDIS_TIMEOUT_ERROR


class AgentError(BaseAppException):
    """ExceþÒo para erros relacionados Ó criaþÒo ou gerenciamento de agentes."""

    def __init__(
        self,
        message: str = "Agent error",
        agent_id: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if agent_id:
            details["agent_id"] = agent_id

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class TWSConnectionError(IntegrationError):
    """ExceþÒo para erros de conexÒo com a API do TWS."""

    def __init__(
        self,
        message: str = "TWS connection error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            service_name="TWS",
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.TWS_CONNECTION_ERROR


class AgentExecutionError(BaseAppException):
    """ExceþÒo para erros durante a execuþÒo de um agente de IA."""

    def __init__(
        self,
        message: str = "Agent execution error",
        agent_id: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if agent_id:
            details["agent_id"] = agent_id

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class ToolExecutionError(BaseAppException):
    """ExceþÒo para erros durante a execuþÒo de uma ferramenta (tool)."""

    def __init__(
        self,
        message: str = "Tool execution error",
        tool_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if tool_name:
            details["tool_name"] = tool_name

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class ToolConnectionError(ToolExecutionError):
    """ExceþÒo para erros de conexÒo dentro de uma ferramenta."""

    def __init__(
        self,
        message: str = "Tool connection error",
        tool_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            tool_name=tool_name,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.CONNECTION_ERROR


class ToolTimeoutError(ToolExecutionError):
    """ExceþÒo para timeouts durante a execuþÒo de uma ferramenta."""

    def __init__(
        self,
        message: str = "Tool timeout",
        tool_name: str | None = None,
        timeout_seconds: float | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if timeout_seconds:
            details["timeout_seconds"] = timeout_seconds

        super().__init__(
            message=message,
            tool_name=tool_name,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.OPERATION_TIMEOUT
        self.status_code = 504


class ToolProcessingError(ToolExecutionError):
    """ExceþÒo para erros de processamento de dados dentro de uma ferramenta."""


class KnowledgeGraphError(BaseAppException):
    """ExceþÒo para erros relacionados ao Knowledge Graph (ex: Mem0)."""

    def __init__(
        self,
        message: str = "Knowledge graph error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class AuditError(BaseAppException):
    """ExceþÒo para erros no sistema de auditoria (queue, lock, etc.)."""

    def __init__(
        self,
        message: str = "Audit system error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class FileIngestionError(BaseAppException):
    """ExceþÒo para erros durante a ingestÒo de arquivos."""

    def __init__(
        self,
        message: str = "File ingestion error",
        filename: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if filename:
            details["filename"] = filename

        super().__init__(
            message=message,
            error_code=ErrorCode.FILE_PROCESSING_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class FileProcessingError(BaseAppException):
    """ExceþÒo para erros durante o processamento de arquivos."""

    def __init__(
        self,
        message: str = "File processing error",
        filename: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if filename:
            details["filename"] = filename

        super().__init__(
            message=message,
            error_code=ErrorCode.FILE_PROCESSING_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class LLMError(IntegrationError):
    """ExceþÒo para erros na comunicaþÒo com o Large Language Model."""

    def __init__(
        self,
        message: str = "LLM error",
        model_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if model_name:
            details["model_name"] = model_name

        super().__init__(
            message=message,
            service_name="LLM",
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.LLM_ERROR


class ParsingError(BaseAppException):
    """ExceþÒo para erros de parsing de dados (JSON, etc.)."""

    def __init__(
        self,
        message: str = "Parsing error",
        data_format: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if data_format:
            details["data_format"] = data_format

        super().__init__(
            message=message,
            error_code=ErrorCode.VALIDATION_ERROR,
            status_code=400,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class DataParsingError(ParsingError):
    """ExceþÒo para erros especÝficos de parsing de dados."""


class NetworkError(BaseAppException):
    """ExceþÒo para erros de rede genÚricos."""

    def __init__(
        self,
        message: str = "Network error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            error_code=ErrorCode.NETWORK_ERROR,
            status_code=502,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class WebSocketError(NetworkError):
    """ExceþÒo para erros especÝficos de WebSocket."""

    def __init__(
        self,
        message: str = "WebSocket error",
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        )
        self.error_code = ErrorCode.WEBSOCKET_ERROR


class DatabaseError(BaseAppException):
    """ExceþÒo para erros de interaþÒo com o banco de dados."""

    def __init__(
        self,
        message: str = "Database error",
        query: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if query:
            # NÒo incluir query completa por seguranþa, apenas tipo
            details["query_type"] = query.split()[0] if query else None

        super().__init__(
            message=message,
            error_code=ErrorCode.DATABASE_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class CacheError(BaseAppException):
    """ExceþÒo para erros relacionados ao sistema de cache."""

    def __init__(
        self,
        message: str = "Cache error",
        cache_key: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if cache_key:
            details["cache_key"] = cache_key

        super().__init__(
            message=message,
            error_code=ErrorCode.CACHE_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


class PoolExhaustedError(CacheError):
    """ExceþÒo para quando o pool de conex§es estß esgotado."""

    def __init__(
        self,
        message: str = "Connection pool exhausted",
        pool_name: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if pool_name:
            details["pool_name"] = pool_name

        super().__init__(
            message=message,
            error_code=ErrorCode.POOL_EXHAUSTED,
            status_code=503,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class NotificationError(BaseAppException):
    """ExceþÒo para erros durante o envio de notificaþ§es."""

    def __init__(
        self,
        message: str = "Notification error",
        notification_type: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if notification_type:
            details["notification_type"] = notification_type

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class NotFoundError(ResourceNotFoundError):
    """ExceþÒo para quando um recurso nÒo Ú encontrado.

    Alias para ResourceNotFoundError para compatibilidade.
    """


class PerformanceError(BaseAppException):
    """ExceþÒo para erros relacionados Ó performance do sistema."""

    def __init__(
        self,
        message: str = "Performance degradation detected",
        metric_name: str | None = None,
        threshold: float | None = None,
        actual_value: float | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if metric_name:
            details["metric_name"] = metric_name
        if threshold:
            details["threshold"] = threshold
        if actual_value:
            details["actual_value"] = actual_value

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )


class HealthCheckError(BaseAppException):
    """ExceþÒo para erros durante verificaþ§es de sa·de do sistema."""

    def __init__(
        self,
        message: str = "Health check error",
        component: str | None = None,
        details: dict[str, Any] | None = None,
        correlation_id: str | None = None,
        original_exception: Exception | None = None,
    ):
        if details is None:
            details = {}
        if component:
            details["component"] = component

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )


# ============================================================================
# COMPATIBILIDADE COM CËDIGO LEGADO
# ============================================================================

# Alias para manter compatibilidade com c¾digo existente
ResyncException = BaseAppException


# ============================================================================
# UTILIT┴RIOS
# ============================================================================


def get_exception_by_error_code(
    error_code: ErrorCode,
) -> type[BaseAppException]:
    """Retorna a classe de exceþÒo apropriada para um c¾digo de erro.

    Args:
        error_code: C¾digo de erro

    Returns:
        Classe de exceþÒo correspondente
    """
    mapping = {
        ErrorCode.VALIDATION_ERROR: ValidationError,
        ErrorCode.AUTHENTICATION_FAILED: AuthenticationError,
        ErrorCode.AUTHORIZATION_FAILED: AuthorizationError,
        ErrorCode.RESOURCE_NOT_FOUND: ResourceNotFoundError,
        ErrorCode.RESOURCE_CONFLICT: ResourceConflictError,
        ErrorCode.BUSINESS_RULE_VIOLATION: BusinessError,
        ErrorCode.RATE_LIMIT_EXCEEDED: RateLimitError,
        ErrorCode.INTEGRATION_ERROR: IntegrationError,
        ErrorCode.SERVICE_UNAVAILABLE: ServiceUnavailableError,
        ErrorCode.CIRCUIT_BREAKER_OPEN: CircuitBreakerError,
        ErrorCode.OPERATION_TIMEOUT: TimeoutError,
        ErrorCode.DATABASE_ERROR: DatabaseError,
        ErrorCode.CACHE_ERROR: CacheError,
        ErrorCode.CONFIGURATION_ERROR: ConfigurationError,
        ErrorCode.REDIS_ERROR: RedisError,
        ErrorCode.REDIS_CONNECTION_ERROR: RedisConnectionError,
        ErrorCode.REDIS_AUTH_ERROR: RedisAuthError,
        ErrorCode.REDIS_TIMEOUT_ERROR: RedisTimeoutError,
        ErrorCode.REDIS_INITIALIZATION_ERROR: RedisInitializationError,
        ErrorCode.TWS_CONNECTION_ERROR: TWSConnectionError,
        ErrorCode.LLM_ERROR: LLMError,
        ErrorCode.NETWORK_ERROR: NetworkError,
        ErrorCode.WEBSOCKET_ERROR: WebSocketError,
    }

    return mapping.get(error_code, InternalError)


__all__ = [
    # Enums
    "ErrorCode",
    "ErrorSeverity",
    # Base
    "BaseAppException",
    "ResyncException",  # Alias para compatibilidade
    # Client Errors (4xx)
    "ValidationError",
    "AuthenticationError",
    "AuthorizationError",
    "ResourceNotFoundError",
    "ResourceConflictError",
    "BusinessError",
    "RateLimitError",
    # Server Errors (5xx)
    "InternalError",
    "IntegrationError",
    "ServiceUnavailableError",
    "CircuitBreakerError",
    "TimeoutError",
    "PerformanceError",
    "HealthCheckError",
    "PoolExhaustedError",
    # Domain Specific
    "ConfigurationError",
    "InvalidConfigError",
    "MissingConfigError",
    "RedisError",
    "RedisInitializationError",
    "RedisConnectionError",
    "RedisAuthError",
    "RedisTimeoutError",
    "AgentError",
    "TWSConnectionError",
    "AgentExecutionError",
    "ToolExecutionError",
    "ToolConnectionError",
    "ToolTimeoutError",
    "ToolProcessingError",
    "KnowledgeGraphError",
    "AuditError",
    "FileIngestionError",
    "FileProcessingError",
    "LLMError",
    "ParsingError",
    "DataParsingError",
    "NetworkError",
    "WebSocketError",
    "DatabaseError",
    "CacheError",
    "NotificationError",
    "NotFoundError",
    "PerformanceError",
    "HealthCheckError",
    # Utilities
    "get_exception_by_error_code",
] (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.auth:[29:313]
==api.auth_secure:[29:313]
logger = get_logger(__name__)

# Security schemes
# Allow missing Authorization to support HttpOnly cookie fallback
security = HTTPBearer(auto_error=False)

# Secret key for JWT tokens - CRITICAL SECURITY FIX
SECRET_KEY = getattr(settings, "SECRET_KEY", None)

# Validate SECRET_KEY is properly configured
if SECRET_KEY is None:
    raise ValueError(
        "CRITICAL SECURITY ERROR: SECRET_KEY is not configured. "
        "Set SECRET_KEY environment variable with at least 32 characters."
    )

if isinstance(SECRET_KEY, str) and len(SECRET_KEY) < 32:
    raise ValueError(
        "CRITICAL SECURITY ERROR: SECRET_KEY must be at least 32 characters long. "
        "Current length: {}".format(len(SECRET_KEY))
    )

# Additional production security checks
if getattr(settings, 'environment', 'development') == 'production':
    if not SECRET_KEY or SECRET_KEY in ['fallback_secret_key_for_development', 'dev', 'test']:
        raise ValueError(
            "CRITICAL SECURITY ERROR: Cannot use development fallback SECRET_KEY in production. "
            "Set a secure, random SECRET_KEY environment variable."
        )

ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30


class SecureAuthenticator:
    """Authenticator resistente a timing attacks."""

    def __init__(self) -> None:
        self._failed_attempts: dict[str, list[datetime]] = {}
        self._lockout_duration = timedelta(minutes=15)
        self._max_attempts = 5
        self._lockout_lock = asyncio.Lock()

    async def verify_credentials(
        self, username: str, password: str, request_ip: str
    ) -> tuple[bool, Optional[str]]:
        """
        Verify credentials with:
        - Constant-time comparison
        - Rate limiting per IP
        - Account lockout
        - Audit logging
        """
        # Check if IP is locked out
        async with self._lockout_lock:
            if await self._is_locked_out(request_ip):
                logger.warning(
                    "Authentication attempt from locked out IP",
                    extra={"ip": request_ip},
                )
                # Still perform full verification to maintain constant time
                # but will return failure regardless
                lockout_remaining = await self._get_lockout_remaining(
                    request_ip
                )
                await asyncio.sleep(0.5)  # Artificial delay
                return (
                    False,
                    f"Too many failed attempts. Try again in {lockout_remaining} minutes",
                )

        # Always hash both provided and expected values to maintain constant time
        provided_username_hash = self._hash_credential(username)
        provided_password_hash = self._hash_credential(password)

        expected_username_hash = self._hash_credential(settings.admin_username)
        expected_password_hash = self._hash_credential(settings.admin_password)

        # Constant-time comparison using secrets.compare_digest
        username_valid = secrets.compare_digest(
            provided_username_hash, expected_username_hash
        )

        password_valid = secrets.compare_digest(
            provided_password_hash, expected_password_hash
        )

        # Combine results without short-circuiting
        credentials_valid = username_valid and password_valid

        # Artificial delay to prevent timing analysis
        await asyncio.sleep(
            secrets.randbelow(100) / 1000
        )  # 0-100ms random delay

        if not credentials_valid:
            await self._record_failed_attempt(request_ip)

            logger.warning(
                "Failed authentication attempt",
                extra={
                    "ip": request_ip,
                    "username_provided": username[:3]
                    + "***",  # Partial for logs
                    "timestamp": datetime.utcnow().isoformat(),
                },
            )

            return False, "Invalid credentials"

        # Success - clear failed attempts
        async with self._lockout_lock:
            if request_ip in self._failed_attempts:
                del self._failed_attempts[request_ip]

        logger.info(
            "Successful authentication",
            extra={
                "ip": request_ip,
                "timestamp": datetime.utcnow().isoformat(),
            },
        )

        return True, None

    def _hash_credential(self, credential: str) -> bytes:
        """Hash credential for constant-time comparison."""
        # Use HMAC with secret key to prevent rainbow table attacks
        secret_key = SECRET_KEY.encode("utf-8")  # Use validated SECRET_KEY
        return hmac.new(
            secret_key, credential.encode("utf-8"), hashlib.sha256
        ).digest()

    async def _record_failed_attempt(self, ip: str) -> None:
        """Record failed authentication attempt."""
        async with self._lockout_lock:
            now = datetime.utcnow()

            if ip not in self._failed_attempts:
                self._failed_attempts[ip] = []

            # Add current attempt
            self._failed_attempts[ip].append(now)

            # Remove attempts outside lockout window
            cutoff = now - self._lockout_duration
            self._failed_attempts[ip] = [
                attempt
                for attempt in self._failed_attempts[ip]
                if attempt > cutoff
            ]

            # Log if approaching lockout
            attempt_count = len(self._failed_attempts[ip])
            if attempt_count >= self._max_attempts - 1:
                logger.warning(
                    f"IP approaching lockout: {attempt_count}/{self._max_attempts} attempts",
                    extra={"ip": ip},
                )

    async def _is_locked_out(self, ip: str) -> bool:
        """Check if IP is currently locked out."""
        if ip not in self._failed_attempts:
            return False

        now = datetime.utcnow()
        cutoff = now - self._lockout_duration

        # Count recent attempts
        recent_attempts = [
            attempt
            for attempt in self._failed_attempts[ip]
            if attempt > cutoff
        ]

        return len(recent_attempts) >= self._max_attempts

    async def _get_lockout_remaining(self, ip: str) -> int:
        """Get remaining lockout time in minutes."""
        if ip not in self._failed_attempts or not self._failed_attempts[ip]:
            return 0

        oldest_attempt = min(self._failed_attempts[ip])
        unlock_time = oldest_attempt + self._lockout_duration
        remaining = (unlock_time - datetime.utcnow()).total_seconds() / 60

        return max(0, int(remaining))


# Global authenticator instance
authenticator = SecureAuthenticator()


def verify_admin_credentials(
    request: Request,
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security),
) -> Optional[str]:
    """
    Verify admin credentials for protected endpoints using JWT tokens.
    """
    try:
        # 1) Try Authorization header (Bearer)
        token = (
            credentials.credentials
            if (credentials and credentials.credentials)
            else None
        )

        # 2) Fallback: HttpOnly cookie "access_token"
        if not token:
            token = request.cookies.get("access_token")
            if not token:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Credentials not provided",
                    headers={"WWW-Authenticate": "Bearer"},
                )

        # Decode & validate JWT
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")

        if username is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Could not validate credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )

        # Accept ADMIN_USERNAME or admin_username for compatibility
        admin_user = getattr(settings, "ADMIN_USERNAME", None) or getattr(
            settings, "admin_username", None
        )
        if username != admin_user:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid admin credentials",
                headers={"WWW-Authenticate": "Bearer"},
            )

        return username
    except jwt.PyJWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )


def create_access_token(
    data: dict[str, Any], expires_delta: Optional[timedelta] = None
) -> str:
    """
    Create a new JWT access token.
    """
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(
            minutes=ACCESS_TOKEN_EXPIRE_MINUTES
        )

    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


async def authenticate_admin(username: str, password: str) -> bool:
    """
    Authenticate admin user credentials with enhanced security validation.
    """
    # Verify the username matches the admin username from settings
    admin_user = getattr(settings, "ADMIN_USERNAME", None) or getattr(
        settings, "admin_username", None
    )
    if username != admin_user:
        return False

    # Use the SecureAuthenticator for constant-time comparison
    client_ip = "unknown"  # In this context, we don't have the request object
    is_valid, _ = await authenticator.verify_credentials(
        username, password, client_ip
    )
    return is_valid (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[97:147]
==core.health.health_service_orchestrator:[263:313]
                    status=HealthStatus.UNHEALTHY,
                    message="Database pool statistics missing for 'database' pool",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={"database_pool": "missing"},
                )

            # Calculate connection usage percentage
            active_connections = db_pool_stats.active_connections
            total_connections = db_pool_stats.total_connections
            connection_usage_percent = (
                (active_connections / total_connections * 100)
                if total_connections > 0
                else 0.0
            )

            # Determine status based on configurable threshold
            threshold_percent = (
                self.config.database_connection_threshold_percent
            )
            if connection_usage_percent > threshold_percent:
                status = HealthStatus.DEGRADED
                message = f"Database connection pool near capacity: {active_connections}/{total_connections} ({connection_usage_percent:.1f}%)"
            else:
                status = HealthStatus.HEALTHY
                message = f"Database connection pool healthy: {active_connections}/{total_connections} ({connection_usage_percent:.1f}%)"

            # Use real database pool statistics
            pool_metadata = {
                "active_connections": active_connections,
                "idle_connections": db_pool_stats.idle_connections,
                "total_connections": total_connections,
                "connection_usage_percent": round(connection_usage_percent, 1),
                "threshold_percent": threshold_percent,
                "connection_errors": db_pool_stats.connection_errors,
                "pool_hits": db_pool_stats.pool_hits,
                "pool_misses": db_pool_stats.pool_misses,
                "connection_creations": db_pool_stats.connection_creations,
                "connection_closures": db_pool_stats.connection_closures,
                "waiting_connections": db_pool_stats.waiting_connections,
                "peak_connections": db_pool_stats.peak_connections,
                "average_wait_time": round(db_pool_stats.average_wait_time, 3),
                "last_health_check": (
                    db_pool_stats.last_health_check.isoformat()
                    if db_pool_stats.last_health_check
                    else None
                ),
            }

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[69:123]
==core.health.health_service_orchestrator:[722:776]
                    status=HealthStatus.UNHEALTHY,
                    message="Connection pools statistics unavailable (empty/null)",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={"pool_stats": "empty or null"},
                )

            # Analyze pool health with safe defaults
            total_connections = pool_stats.get("total_connections", 0)
            active_connections = pool_stats.get("active_connections", 0)

            if total_connections == 0:
                status = HealthStatus.UNHEALTHY
                message = "No database connections available"
            else:
                # Calculate connection usage percentage
                connection_usage_percent = (
                    active_connections / total_connections * 100
                )

                # Use database-specific threshold for database pool
                threshold_percent = (
                    self.config.database_connection_threshold_percent
                )

                if connection_usage_percent > threshold_percent:
                    status = HealthStatus.DEGRADED
                    message = (
                        f"Connection pool near capacity: {active_connections}/{total_connections} "
                        f"({connection_usage_percent:.1f}%, threshold: {threshold_percent}%)"
                    )
                else:
                    status = HealthStatus.HEALTHY
                    message = (
                        f"Connection pool healthy: {active_connections}/{total_connections} "
                        f"({connection_usage_percent:.1f}%)"
                    )

            response_time = (time.time() - start_time) * 1000

            # Enhance metadata with calculated percentages and thresholds
            enhanced_metadata = dict(pool_stats)
            if (
                "active_connections" in pool_stats
                and "total_connections" in pool_stats
            ):
                enhanced_metadata["connection_usage_percent"] = round(
                    connection_usage_percent, 1
                )
                enhanced_metadata["threshold_percent"] = (
                    self.config.database_connection_threshold_percent
                )

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[845:894]
==core.health.refactored_health_service_orchestrator:[229:278]
        priority = {
            HealthStatus.UNHEALTHY: 3,
            HealthStatus.DEGRADED: 2,
            HealthStatus.UNKNOWN: 1,
            HealthStatus.HEALTHY: 0,
        }
        worst = HealthStatus.HEALTHY
        for comp in components.values():
            if priority[comp.status] > priority[worst]:
                worst = comp.status
        return worst

    def _generate_summary(
        self, components: dict[str, ComponentHealth]
    ) -> dict[str, int]:
        """Generate summary of health status counts."""
        summary = {
            "healthy": 0,
            "degraded": 0,
            "unhealthy": 0,
            "unknown": 0,
        }
        for comp in components.values():
            if comp.status == HealthStatus.HEALTHY:
                summary["healthy"] += 1
            elif comp.status == HealthStatus.DEGRADED:
                summary["degraded"] += 1
            elif comp.status == HealthStatus.UNHEALTHY:
                summary["unhealthy"] += 1
            else:
                summary["unknown"] += 1
        return summary

    def _check_alerts(
        self, components: dict[str, ComponentHealth]
    ) -> list[str]:
        """Check for alerts based on component health status."""
        alerts = []
        for name, comp in components.items():
            if comp.status == HealthStatus.UNHEALTHY:
                alerts.append(f"{name} is unhealthy")
            elif comp.status == HealthStatus.DEGRADED:
                # Include specific threshold breach information in alerts
                if (
                    name == "database"
                    and "connection_usage_percent" in comp.metadata
                ):
                    threshold = comp.metadata.get(
                        "threshold_percent", (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[44:96]
==api.health_simplified:[34:86]
class HealthSummaryResponse(BaseModel):
    """Health check summary response."""

    status: str
    status_color: str
    status_description: str
    timestamp: str
    correlation_id: str
    summary: dict[str, Any]
    alerts: list[str]
    performance_metrics: dict[str, Any]


class ComponentHealthResponse(BaseModel):
    """Individual component health response."""

    name: str
    component_type: str
    status: str
    status_color: str
    message: str
    response_time_ms: float | None = None
    last_check: str
    error_count: int
    metadata: dict[str, Any] | None = None


class DetailedHealthResponse(BaseModel):
    """Detailed health check response."""

    overall_status: str
    overall_status_color: str
    timestamp: str
    correlation_id: str
    components: dict[str, ComponentHealthResponse]
    summary: dict[str, Any]
    alerts: list[str]
    performance_metrics: dict[str, Any]
    history: list[dict[str, Any]]


class CoreHealthResponse(BaseModel):
    """Core components health response."""

    status: str
    status_color: str
    timestamp: str
    core_components: dict[str, ComponentHealthResponse]
    summary: dict[str, Any]


# Core components that are critical for system operation (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[150:216]
==core.health.refactored_health_check_service:[170:230]
        self._component_cache[component_name] = health

        return health

    async def get_system_health(self) -> SystemHealthStatus:
        """
        Get overall system health status.

        Returns:
            SystemHealthStatus: Overall system health status
        """
        try:
            # Run all checks to get current status
            results = await self.run_all_checks()

            if not results:
                return SystemHealthStatus.OK

            # Count status types across all results
            healthy_count = 0
            warning_count = 0
            critical_count = 0

            for result in results:
                for component in result.components.values():
                    if component.status == HealthStatus.HEALTHY:
                        healthy_count += 1
                    elif component.status == HealthStatus.DEGRADED:
                        warning_count += 1
                    elif component.status in [
                        HealthStatus.UNHEALTHY,
                        HealthStatus.UNKNOWN,
                    ]:
                        critical_count += 1

            # Determine overall status
            total_components = len(results)
            critical_ratio = (
                critical_count / total_components
                if total_components > 0
                else 0
            )

            if critical_ratio > 0.5:  # More than 50% critical
                return SystemHealthStatus.CRITICAL
            if warning_count > 0 or critical_count > 0:
                return SystemHealthStatus.WARNING
            return SystemHealthStatus.OK

        except Exception:
            # Return critical status on any error
            return SystemHealthStatus.CRITICAL

    async def _perform_basic_health_check(
        self, component_name: str, component_type: ComponentType
    ) -> ComponentHealth:
        """
        Perform a basic health check for a component.

        Args:
            component_name: Name of the component
            component_type: Type of the component

        Returns:
            ComponentHealth: Health status of the component
        """ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[697:743]
==core.health.monitors.connection_monitor:[47:91]
        start_time = time.time()

        try:
            from resync.core.connection_manager import (
                get_connection_pool_manager,
            )

            pool_manager = get_connection_pool_manager()
            if not pool_manager:
                return ComponentHealth(
                    name="connection_pools",
                    component_type=ComponentType.CONNECTION_POOL,
                    status=HealthStatus.UNKNOWN,
                    message="Connection pool manager not available",
                    last_check=datetime.now(),
                )

            # Check pool status
            pool_stats = pool_manager.get_pool_stats()

            if not pool_stats:
                response_time = (time.time() - start_time) * 1000
                return ComponentHealth(
                    name="connection_pools",
                    component_type=ComponentType.CONNECTION_POOL,
                    status=HealthStatus.UNHEALTHY,
                    message="Connection pools statistics unavailable (empty/null)",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={"pool_stats": "empty or null"},
                )

            # Analyze pool health with safe defaults
            total_connections = pool_stats.get("total_connections", 0)
            active_connections = pool_stats.get("active_connections", 0)

            if total_connections == 0:
                status = HealthStatus.UNHEALTHY
                message = "No database connections available"
            else:
                # Calculate connection usage percentage
                connection_usage_percent = (
                    active_connections / total_connections * 100
                )

                # Use database-specific threshold for database pool (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[161:199]
==core.health.health_service_simplified:[221:259]
        try:
            # Run all checks to get current status
            results = await self.run_all_checks()

            if not results:
                return SystemHealthStatus.OK

            # Count status types across all results
            healthy_count = 0
            warning_count = 0
            critical_count = 0

            for result in results:
                for component in result.components.values():
                    if component.status == HealthStatus.HEALTHY:
                        healthy_count += 1
                    elif component.status == HealthStatus.DEGRADED:
                        warning_count += 1
                    elif component.status in [
                        HealthStatus.UNHEALTHY,
                        HealthStatus.UNKNOWN,
                    ]:
                        critical_count += 1

            # Determine overall status
            total_components = len(results)
            critical_ratio = (
                critical_count / total_components
                if total_components > 0
                else 0
            )

            if critical_ratio > 0.5:  # More than 50% critical
                return SystemHealthStatus.CRITICAL
            if warning_count > 0 or critical_count > 0:
                return SystemHealthStatus.WARNING
            return SystemHealthStatus.OK
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[432:481]
==core.health.monitors.cache_monitor:[48:99]
        start_time = time.time()

        try:
            # Import and test the actual cache implementation
            from resync_new.core.cache import AsyncTTLCache

            # Create a test cache instance to verify functionality
            test_cache = AsyncTTLCache(ttl_seconds=60, cleanup_interval=30)

            # Test cache operations
            test_key = f"health_test_{int(time.time())}"
            test_value = {"timestamp": time.time(), "status": "health_check"}

            # Test set operation
            await test_cache.set(test_key, test_value)

            # Test get operation
            retrieved_value = await test_cache.get(test_key)

            # Verify the value was retrieved correctly
            if retrieved_value != test_value:
                await test_cache.stop()
                raise Exception("Cache get/set test failed")

            # Test delete operation
            delete_result = await test_cache.delete(test_key)
            if not delete_result:
                logger.warning("Cache delete test had unexpected result")

            # Get cache statistics
            metrics = test_cache.get_detailed_metrics()

            # Stop the test cache
            await test_cache.stop()

            response_time = (time.time() - start_time) * 1000

            return ComponentHealth(
                name="cache_hierarchy",
                component_type=ComponentType.CACHE,
                status=HealthStatus.HEALTHY,
                message="Cache hierarchy operational",
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=metrics,
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000

            # Sanitize error message for security (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.models.agents:[7:40]
==models.agents:[7:40]
class AgentType(str, Enum):
    """Types of AI agents."""

    CHAT = "chat"
    TASK = "task"
    ANALYSIS = "analysis"
    MONITORING = "monitoring"
    SUPPORT = "support"


class AgentConfig(BaseModel):
    """Configuration model for AI agents."""

    id: str = Field(..., description="Unique identifier for the agent.")
    name: str = Field(..., description="The name of the agent.")
    agent_type: AgentType = Field(..., description="The type of AI agent.")
    role: str = Field(..., description="The role of the agent.")
    goal: str = Field(..., description="The primary goal of the agent.")
    backstory: str = Field(
        ..., description="The backstory or context for the agent."
    )
    tools: list[str] = Field(
        default_factory=list, description="List of tools the agent can use."
    )
    model_name: str = Field(
        ..., description="The name of the LLM model to use."
    )
    memory: bool = Field(
        default=True, description="Whether the agent should use memory."
    )
    max_rpm: int | None = Field(
        None, description="Maximum requests per minute for the agent."
    ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[590:625]
==core.health.monitors.system_monitor:[103:146]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def check_cpu_health(self) -> ComponentHealth:
        """
        Check CPU load monitoring with multi-sample readings.

        Returns:
            ComponentHealth: CPU health status
        """
        start_time = time.time()

        try:
            # Multi-sample CPU reading for more accurate results
            cpu_samples = []

            # First reading
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)  # Small delay between samples
            # Second reading
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)  # Small delay between samples
            # Third reading
            cpu_samples.append(psutil.cpu_percent(interval=0))

            # Average the samples for a more accurate reading
            cpu_percent = sum(cpu_samples) / len(cpu_samples)

            # Determine status based on usage thresholds
            if cpu_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"CPU usage critically high: {cpu_percent:.1f}%"
            elif cpu_percent > 85:
                status = HealthStatus.DEGRADED
                message = f"CPU usage high: {cpu_percent:.1f}%"
            else:
                status = HealthStatus.HEALTHY
                message = f"CPU usage normal: {cpu_percent:.1f}%"

            response_time = (time.time() - start_time) * 1000
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[338:378]
==core.health.monitors.redis_monitor:[48:87]
        start_time = time.time()

        try:
            # Check Redis configuration
            from resync_new.config.settings import settings

            if not settings.REDIS_URL:
                return ComponentHealth(
                    name="redis",
                    component_type=ComponentType.REDIS,
                    status=HealthStatus.UNKNOWN,
                    message="Redis URL not configured",
                    last_check=datetime.now(),
                )

            # Test actual Redis connectivity
            import redis.asyncio as redis_async
            from redis.exceptions import RedisError
            from redis.exceptions import TimeoutError as RedisTimeoutError

            try:
                redis_client = redis_async.from_url(settings.REDIS_URL)
                # Test connectivity with ping
                await redis_client.ping()

                # Test read/write operation
                test_key = f"health_check_{int(time.time())}"
                await redis_client.setex(
                    test_key, 1, "test"
                )  # Set with expiration
                value = await redis_client.get(test_key)

                if value != b"test":
                    raise RedisError("Redis read/write test failed")

                # Get Redis info for additional details
                redis_info = await redis_client.info()

                response_time = (time.time() - start_time) * 1000
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[80:106]
==core.health.refactored_health_service_orchestrator:[101:127]
        performance_metrics = {}
        connection_pool_stats = {}

        if performance_collector:
            try:
                performance_metrics = (
                    await performance_collector.get_system_performance_metrics()
                )
                pool_metrics = (
                    await performance_collector.get_connection_pool_metrics()
                )
                if "error" not in pool_metrics:
                    connection_pool_stats = pool_metrics
            except Exception as e:
                logger.warning(
                    "failed_to_collect_performance_metrics", error=str(e)
                )

        result.metadata = {
            "check_start_time": start_time,
            "proactive_checks": proactive_monitor is not None,
            "performance_metrics": performance_metrics,
            "connection_pool_stats": connection_pool_stats,
        }

        # Get enabled health checkers (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[61:88]
==core.health.refactored_health_check_service:[77:104]
                    components={component_name: health},
                    summary={
                        "total_components": 1,
                        "healthy": (
                            1 if health.status == HealthStatus.HEALTHY else 0
                        ),
                        "degraded": (
                            1 if health.status == HealthStatus.DEGRADED else 0
                        ),
                        "unhealthy": (
                            1 if health.status == HealthStatus.UNHEALTHY else 0
                        ),
                        "unknown": (
                            1 if health.status == HealthStatus.UNKNOWN else 0
                        ),
                    },
                )

                results.append(result)

                # Cache the component health
                self._component_cache[component_name] = health

            except Exception as e:
                # Create error result for failed checks
                error_health = ComponentHealth(
                    name=component_name, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[395:419]
==core.health.monitors.redis_monitor:[112:138]
            except (RedisError, RedisTimeoutError) as e:
                response_time = (time.time() - start_time) * 1000

                logger.error("redis_connectivity_test_failed", error=str(e))
                return ComponentHealth(
                    name="redis",
                    component_type=ComponentType.REDIS,
                    status=HealthStatus.UNHEALTHY,
                    message=f"Redis connectivity failed: {str(e)}",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    error_count=1,
                )
            finally:
                # Close the test connection
                try:
                    await redis_client.close()
                except Exception as e:
                    logger.debug(
                        f"Redis client close error during health check: {e}"
                    )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[747:771]
==core.health.monitors.connection_monitor:[93:117]
                if connection_usage_percent > threshold_percent:
                    status = HealthStatus.DEGRADED
                    message = (
                        f"Connection pool near capacity: {active_connections}/{total_connections} "
                        f"({connection_usage_percent:.1f}%, threshold: {threshold_percent}%)"
                    )
                else:
                    status = HealthStatus.HEALTHY
                    message = (
                        f"Connection pool healthy: {active_connections}/{total_connections} "
                        f"({connection_usage_percent:.1f}%)"
                    )

            response_time = (time.time() - start_time) * 1000

            # Enhance metadata with calculated percentages and thresholds
            enhanced_metadata = dict(pool_stats)
            if (
                "active_connections" in pool_stats
                and "total_connections" in pool_stats
            ):
                enhanced_metadata["connection_usage_percent"] = round(
                    connection_usage_percent, 1
                ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[99:145]
==core.health.refactored_health_check_service:[115:161]
                    components={component_name: error_health},
                    summary={"total_components": 1, "unknown": 1},
                )

                results.append(error_result)

        return results

    async def get_component_health(
        self, component_type: ComponentType
    ) -> ComponentHealth:
        """
        Get health status for a specific component type.

        Args:
            component_type: The type of component to check

        Returns:
            ComponentHealth: Health status of the component

        Raises:
            ValueError: If component type is not supported
        """
        # Map component type to component name
        component_name_map = {
            ComponentType.DATABASE: "database",
            ComponentType.REDIS: "redis",
            ComponentType.CACHE: "cache_hierarchy",
            ComponentType.FILE_SYSTEM: "file_system",
            ComponentType.MEMORY: "memory",
            ComponentType.CPU: "cpu",
        }

        component_name = component_name_map.get(component_type)
        if not component_name:
            raise ValueError(f"Unsupported component type: {component_type}")

        # Check cache first
        cached_health = self._component_cache.get(component_name)
        if cached_health:
            # Simple cache expiry check (5 minutes)
            age = datetime.now() - cached_health.last_check
            if age.total_seconds() < 300:
                return cached_health

        # Perform fresh health check (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[57:79]
==core.health.health_service_simplified:[307:329]
                result = HealthCheckResult(
                    overall_status=health.status,
                    timestamp=datetime.now(),
                    correlation_id=f"health_check_{component_name}_{int(time.time())}",
                    components={component_name: health},
                    summary={
                        "total_components": 1,
                        "healthy": (
                            1 if health.status == HealthStatus.HEALTHY else 0
                        ),
                        "degraded": (
                            1 if health.status == HealthStatus.DEGRADED else 0
                        ),
                        "unhealthy": (
                            1 if health.status == HealthStatus.UNHEALTHY else 0
                        ),
                        "unknown": (
                            1 if health.status == HealthStatus.UNKNOWN else 0
                        ),
                    },
                )
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[45:74]
==core.health.health_service_orchestrator:[597:626]
        start_time = time.time()

        try:
            import psutil

            # Multiple samples for more accurate reading
            cpu_samples = []
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)
            cpu_samples.append(psutil.cpu_percent(interval=0))

            cpu_percent = sum(cpu_samples) / len(cpu_samples)

            # Determine status
            if cpu_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"CPU usage critically high: {cpu_percent:.1f}%"
            elif cpu_percent > 85:
                status = HealthStatus.DEGRADED
                message = f"CPU usage high: {cpu_percent:.1f}%"
            else:
                status = HealthStatus.HEALTHY
                message = f"CPU usage normal: {cpu_percent:.1f}%"

            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[45:73]
==core.health.monitors.system_monitor:[115:146]
        start_time = time.time()

        try:
            import psutil

            # Multiple samples for more accurate reading
            cpu_samples = []
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)
            cpu_samples.append(psutil.cpu_percent(interval=0))
            await asyncio.sleep(0.05)
            cpu_samples.append(psutil.cpu_percent(interval=0))

            cpu_percent = sum(cpu_samples) / len(cpu_samples)

            # Determine status
            if cpu_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"CPU usage critically high: {cpu_percent:.1f}%"
            elif cpu_percent > 85:
                status = HealthStatus.DEGRADED
                message = f"CPU usage high: {cpu_percent:.1f}%"
            else:
                status = HealthStatus.HEALTHY
                message = f"CPU usage normal: {cpu_percent:.1f}%"

            response_time = (time.time() - start_time) * 1000
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[654:680]
==core.health.monitors.tws_monitor:[46:70]
        start_time = time.time()

        try:
            # Check TWS configuration
            from resync_new.config.settings import settings

            tws_config = settings.get("tws_monitor", {})
            if not tws_config or not tws_config.get("enabled", False):
                return ComponentHealth(
                    name="tws_monitor",
                    component_type=ComponentType.EXTERNAL_API,
                    status=HealthStatus.UNKNOWN,
                    message="TWS monitor not configured",
                    last_check=datetime.now(),
                )

            # Simple connectivity test
            response_time = (time.time() - start_time) * 1000

            return ComponentHealth(
                name="tws_monitor",
                component_type=ComponentType.EXTERNAL_API,
                status=HealthStatus.HEALTHY,
                message="TWS monitor connectivity test successful",
                response_time_ms=response_time,
                last_check=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[87:106]
==core.health.health_service_orchestrator:[381:400]
                    status=HealthStatus.HEALTHY,
                    message="Redis connectivity test successful",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={
                        "redis_version": redis_info.get("redis_version"),
                        "connected_clients": redis_info.get(
                            "connected_clients"
                        ),
                        "used_memory": redis_info.get("used_memory_human"),
                        "uptime_seconds": redis_info.get("uptime_in_seconds"),
                        "test_key_result": value.decode() if value else None,
                    },
                )
            except (RedisError, RedisTimeoutError) as e:
                response_time = (time.time() - start_time) * 1000

                logger.error("redis_connectivity_test_failed", error=str(e))
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[56:82]
==core.health.health_service_orchestrator:[222:248]
                    status=HealthStatus.UNKNOWN,
                    message="Database connection pool not available",
                    last_check=datetime.now(),
                )

            # Test database connectivity
            async with pool_manager.acquire_connection("default") as conn:
                # Simple query to test connection
                if hasattr(conn, "execute"):
                    result = await conn.execute("SELECT 1")
                    if hasattr(result, "fetchone"):
                        await result.fetchone()
                elif hasattr(conn, "cursor"):
                    # SQLite case
                    cursor = await conn.cursor()
                    await cursor.execute("SELECT 1")
                    await cursor.fetchone()
                    await cursor.close()

            response_time = (time.time() - start_time) * 1000

            # Get real pool statistics from pool manager
            pool_stats = pool_manager.get_pool_stats()

            if not pool_stats:
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_simplified:[311:329]
==core.health.refactored_health_check_service:[77:95]
                    components={component_name: health},
                    summary={
                        "total_components": 1,
                        "healthy": (
                            1 if health.status == HealthStatus.HEALTHY else 0
                        ),
                        "degraded": (
                            1 if health.status == HealthStatus.DEGRADED else 0
                        ),
                        "unhealthy": (
                            1 if health.status == HealthStatus.UNHEALTHY else 0
                        ),
                        "unknown": (
                            1 if health.status == HealthStatus.UNKNOWN else 0
                        ),
                    },
                )
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[108:127]
==core.health.health_service_orchestrator:[402:421]
                    status=HealthStatus.UNHEALTHY,
                    message=f"Redis connectivity failed: {str(e)}",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    error_count=1,
                )
            finally:
                # Close the test connection
                try:
                    await redis_client.close()
                except Exception as e:
                    logger.debug(
                        f"Redis client close error during health check: {e}"
                    )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            logger.error("redis_health_check_failed", error=str(e))
            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[54:85]
==core.health.health_service_orchestrator:[348:379]
                    status=HealthStatus.UNKNOWN,
                    message="Redis URL not configured",
                    last_check=datetime.now(),
                )

            # Test actual Redis connectivity
            import redis.asyncio as redis_async
            from redis.exceptions import RedisError
            from redis.exceptions import TimeoutError as RedisTimeoutError

            try:
                redis_client = redis_async.from_url(settings.REDIS_URL)
                # Test connectivity with ping
                await redis_client.ping()

                # Test read/write operation
                test_key = f"health_check_{int(time.time())}"
                await redis_client.setex(
                    test_key, 1, "test"
                )  # Set with expiration
                value = await redis_client.get(test_key)

                if value != b"test":
                    raise RedisError("Redis read/write test failed")

                # Get Redis info for additional details
                redis_info = await redis_client.info()

                response_time = (time.time() - start_time) * 1000

                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.filesystem_health_checker:[44:69]
==core.health.health_service_orchestrator:[494:519]
        start_time = time.time()

        try:
            # Check disk space
            import psutil

            disk_usage = psutil.disk_usage("/")
            disk_usage_percent = (disk_usage.used / disk_usage.total) * 100

            # Determine status
            if disk_usage_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"Disk space critically low: {disk_usage_percent:.1f}% used"
            elif disk_usage_percent > 85:
                status = HealthStatus.DEGRADED
                message = (
                    f"Disk space getting low: {disk_usage_percent:.1f}% used"
                )
            else:
                status = HealthStatus.HEALTHY
                message = f"Disk space OK: {disk_usage_percent:.1f}% used"

            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cache_health_checker:[44:82]
==core.health.health_service_orchestrator:[432:470]
        start_time = time.time()

        try:
            # Import and test the actual cache implementation
            from resync_new.core.cache import AsyncTTLCache

            # Create a test cache instance to verify functionality
            test_cache = AsyncTTLCache(ttl_seconds=60, cleanup_interval=30)

            # Test cache operations
            test_key = f"health_test_{int(time.time())}"
            test_value = {"timestamp": time.time(), "status": "health_check"}

            # Test set operation
            await test_cache.set(test_key, test_value)

            # Test get operation
            retrieved_value = await test_cache.get(test_key)

            # Verify the value was retrieved correctly
            if retrieved_value != test_value:
                await test_cache.stop()
                raise Exception("Cache get/set test failed")

            # Test delete operation
            delete_result = await test_cache.delete(test_key)
            if not delete_result:
                logger.warning("Cache delete test had unexpected result")

            # Get cache statistics
            metrics = test_cache.get_detailed_metrics()

            # Stop the test cache
            await test_cache.stop()

            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[59:81]
==core.monitoring.circuit_breaker:[39:62]
                    f"Circuit breaker is open for {self.recovery_timeout}s"
                )

        try:
            result = await func(*args, **kwargs)
            # On success, reset if we were in half-open state
            if self.state == "half-open":
                self.state = "closed"
                self.failure_count = 0
            return result
        except Exception as e:
            self.failure_count += 1
            self.last_failure_time = datetime.now()
            # If we've exceeded threshold, open the circuit
            if self.failure_count >= self.failure_threshold:
                self.state = "open"
                logger.warning(
                    "circuit_breaker_opened", failure_count=self.failure_count
                )
            raise e

    def get_stats(self) -> dict[str, Any]:
        """Get circuit breaker statistics for monitoring.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[607:624]
==api.health_simplified:[529:546]
    components = [
        {
            "name": "database",
            "type": ComponentType.DATABASE.value,
            "description": "Database connectivity and performance",
        },
        {
            "name": "redis",
            "type": ComponentType.REDIS.value,
            "description": "Redis cache connectivity",
        },
        {
            "name": "cache_hierarchy",
            "type": ComponentType.CACHE.value,
            "description": "Cache hierarchy health",
        },
        { (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[218:236]
==api.health_simplified:[225:243]
        core_summary = {
            "total_core_components": len(core_components),
            "healthy_core_components": sum(
                1
                for c in core_components.values()
                if c.status == HealthStatus.HEALTHY
            ),
            "unhealthy_core_components": sum(
                1
                for c in core_components.values()
                if c.status == HealthStatus.UNHEALTHY
            ),
            "timestamp": datetime.now().isoformat(),
        }

        return CoreHealthResponse(
            status=core_status.value,
            status_color=get_status_color(core_status), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[54:84]
==core.health.monitors.redis_monitor:[56:87]
                    status=HealthStatus.UNKNOWN,
                    message="Redis URL not configured",
                    last_check=datetime.now(),
                )

            # Test actual Redis connectivity
            import redis.asyncio as redis_async
            from redis.exceptions import RedisError
            from redis.exceptions import TimeoutError as RedisTimeoutError

            try:
                redis_client = redis_async.from_url(settings.REDIS_URL)

                # Test connectivity with ping
                await redis_client.ping()

                # Test read/write operation
                test_key = f"health_check_{int(time.time())}"
                await redis_client.setex(
                    test_key, 1, "test"
                )  # Set with expiration
                value = await redis_client.get(test_key)

                if value != b"test":
                    raise RedisError("Redis read/write test failed")

                # Get Redis info for additional details
                redis_info = await redis_client.info()

                response_time = (time.time() - start_time) * 1000
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[108:125]
==core.health.monitors.redis_monitor:[119:138]
                    status=HealthStatus.UNHEALTHY,
                    message=f"Redis connectivity failed: {str(e)}",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    error_count=1,
                )
            finally:
                # Close the test connection
                try:
                    await redis_client.close()
                except Exception as e:
                    logger.debug(
                        f"Redis client close error during health check: {e}"
                    )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[69:90]
==core.health.monitors.connection_monitor:[69:91]
                    status=HealthStatus.UNHEALTHY,
                    message="Connection pools statistics unavailable (empty/null)",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={"pool_stats": "empty or null"},
                )

            # Analyze pool health with safe defaults
            total_connections = pool_stats.get("total_connections", 0)
            active_connections = pool_stats.get("active_connections", 0)

            if total_connections == 0:
                status = HealthStatus.UNHEALTHY
                message = "No database connections available"
            else:
                # Calculate connection usage percentage
                connection_usage_percent = (
                    active_connections / total_connections * 100
                )

                # Use database-specific threshold for database pool
                # Default threshold if not available (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.memory_health_checker:[44:67]
==core.health.health_service_orchestrator:[546:569]
        start_time = time.time()

        try:
            import psutil

            # Get memory usage
            memory = psutil.virtual_memory()
            memory_usage_percent = memory.percent

            # Determine status
            if memory_usage_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"Memory usage critically high: {memory_usage_percent:.1f}%"
            elif memory_usage_percent > 85:
                status = HealthStatus.DEGRADED
                message = f"Memory usage high: {memory_usage_percent:.1f}%"
            else:
                status = HealthStatus.HEALTHY
                message = f"Memory usage normal: {memory_usage_percent:.1f}%"

            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_alerting:[192:227]
==core.health.health_service_orchestrator:[862:882]
            "healthy": 0,
            "degraded": 0,
            "unhealthy": 0,
            "unknown": 0,
        }
        for comp in components.values():
            if comp.status == HealthStatus.HEALTHY:
                summary["healthy"] += 1
            elif comp.status == HealthStatus.DEGRADED:
                summary["degraded"] += 1
            elif comp.status == HealthStatus.UNHEALTHY:
                summary["unhealthy"] += 1
            else:
                summary["unknown"] += 1
        return summary

    def _check_alerts(
        self, components: dict[str, ComponentHealth]
    ) -> list[str]:
        """Check for alerts based on component health status.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[379:393]
==core.health.monitors.redis_monitor:[88:102]
                    name="redis",
                    component_type=ComponentType.REDIS,
                    status=HealthStatus.HEALTHY,
                    message="Redis connectivity test successful",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={
                        "redis_version": redis_info.get("redis_version"),
                        "connected_clients": redis_info.get(
                            "connected_clients"
                        ),
                        "used_memory": redis_info.get("used_memory_human"),
                        "uptime_seconds": redis_info.get("uptime_in_seconds"),
                        "test_key_result": value.decode() if value else None, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[34:58]
==core.monitoring.circuit_breaker:[14:38]
logger = structlog.get_logger(__name__)


class CircuitBreaker:
    """Simple circuit breaker implementation for health checks."""

    def __init__(self, failure_threshold: int = 5, recovery_timeout: int = 60):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.failure_count = 0
        self.last_failure_time = None
        self.state = "closed"  # closed, open, half-open
        self._last_check = datetime.now()

    async def call(self, func, *args, **kwargs):
        """Executes the function with circuit breaker protection."""
        if self.state == "open":
            # Check if it's time to attempt recovery
            if (
                datetime.now() - self.last_failure_time
            ).seconds > self.recovery_timeout:
                self.state = "half-open"
            else:
                # Circuit is open, fail fast (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[546:566]
==core.health.monitors.system_monitor:[47:66]
        start_time = time.time()

        try:
            import psutil

            # Get memory usage
            memory = psutil.virtual_memory()
            memory_usage_percent = memory.percent

            # Determine status
            if memory_usage_percent > 95:
                status = HealthStatus.UNHEALTHY
                message = f"Memory usage critically high: {memory_usage_percent:.1f}%"
            elif memory_usage_percent > 85:
                status = HealthStatus.DEGRADED
                message = f"Memory usage high: {memory_usage_percent:.1f}%"
            else:
                status = HealthStatus.HEALTHY
                message = f"Memory usage normal: {memory_usage_percent:.1f}%"
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.auth:[100:114]
==api.validation.enhanced_security_fixed:[342:358]
            )
        # Check for common weak passwords
        weak_passwords = {
            "password",
            "123456",
            "12345678",
            "qwerty",
            "abc123",
            "password123",
            "admin",
            "root",
            "guest",
            "test",
        } (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[87:99]
==core.health.monitors.redis_monitor:[90:102]
                    status=HealthStatus.HEALTHY,
                    message="Redis connectivity test successful",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={
                        "redis_version": redis_info.get("redis_version"),
                        "connected_clients": redis_info.get(
                            "connected_clients"
                        ),
                        "used_memory": redis_info.get("used_memory_human"),
                        "uptime_seconds": redis_info.get("uptime_in_seconds"),
                        "test_key_result": value.decode() if value else None, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.refactored_health_check_service:[246:261]
==core.health.refactored_health_service_orchestrator:[331:346]
        return self.config_manager.get_config_summary_enhanced()

    def validate_configuration(self) -> dict[str, Any]:
        """Validate current configuration."""
        return {
            "config_validation": self.config_manager.validate_config(),
            "checker_validation": self.config_manager.validate_all_checkers_config(),
            "is_valid": (
                len(self.config_manager.validate_config()) == 0
                and all(
                    len(errors) == 0
                    for errors in self.config_manager.validate_all_checkers_config().values()
                )
            ),
        } (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.health_checker_factory:[103:123]
==core.health.health_config_manager:[456:480]
        enabled_components = {
            "database",
            "redis",
            "cache_hierarchy",
            "file_system",
            "memory",
            "cpu",
            "tws_monitor",
            "connection_pools",
            "websocket_pool",
        }

        return component_name in enabled_components

    def get_retry_configuration(self, component_name: str) -> dict[str, Any]:
        """
        Get retry configuration for a component.

        Args:
            component_name: Name of the component

        Returns:
            Dictionary with retry settings
        """ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.__init__:[132:145]
==api.validation.query_params:[519:531]
    "PaginationParams",
    "SearchParams",
    "FilterParams",
    "SortParams",
    "DateRangeParams",
    "AgentQueryParams",
    "SystemQueryParams",
    "AuditQueryParams",
    "FileQueryParams",
    "CombinedQueryParams",
    "SortOrder",
    "FilterOperator",
    # File upload validation models (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[91:105]
==core.health.health_service_simplified:[128:141]
                    last_check=datetime.now(),
                    error_count=1,
                )

                error_result = HealthCheckResult(
                    overall_status=HealthStatus.UNKNOWN,
                    timestamp=datetime.now(),
                    correlation_id=f"health_check_{component_name}_error_{int(time.time())}",
                    components={component_name: error_health},
                    summary={"total_components": 1, "unknown": 1},
                )

                results.append(error_result)
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[946:962]
==utils.exceptions:[919:935]
        if details is None:
            details = {}
        if filename:
            details["filename"] = filename

        super().__init__(
            message=message,
            error_code=ErrorCode.FILE_PROCESSING_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[919:935]
==utils.exceptions:[946:962]
        if details is None:
            details = {}
        if filename:
            details["filename"] = filename

        super().__init__(
            message=message,
            error_code=ErrorCode.FILE_PROCESSING_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.__init__:[172:185]
==api.validation.config:[596:607]
    "ValidationMode",
    "SanitizationLevel",
    "ValidationConfigModel",
    "AgentValidationConfig",
    "ChatValidationConfig",
    "SecurityValidationConfig",
    "RateLimitConfig",
    "ValidationSettings",
    "get_validation_settings",
    "set_validation_settings",
] (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.cache_monitor:[155:179]
==core.health.monitors.redis_monitor:[194:218]
            last_check=datetime.now(),
        )

    def get_cached_health(self) -> ComponentHealth | None:
        """
        Get cached health result if available and recent.

        Returns:
            Cached ComponentHealth or None if cache is stale/empty
        """
        if self._cached_result:
            # Simple cache expiry check (5 minutes)
            age = datetime.now() - self._last_check
            if age.total_seconds() < 300:
                return self._cached_result
            # Cache expired
            self._cached_result = None

        return None

    def clear_cache(self) -> None:
        """Clear the cached health result."""
        self._cached_result = None
        self._last_check = None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[569:579]
==core.health.monitors.system_monitor:[72:82]
                name="memory",
                component_type=ComponentType.MEMORY,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "memory_usage_percent": memory_usage_percent,
                    "memory_available_gb": memory.available / (1024**3),
                    "memory_total_gb": memory.total / (1024**3), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[813:823]
==core.health.monitors.connection_monitor:[190:201]
        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            logger.error("websocket_pool_health_check_failed", error=str(e))
            return ComponentHealth(
                name="websocket_pool",
                component_type=ComponentType.CONNECTION_POOL,
                status=HealthStatus.UNHEALTHY,
                message=f"WebSocket pool unavailable: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[149:161]
==core.health.health_service_orchestrator:[315:327]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=pool_metadata,
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000

            logger.error("database_health_check_failed", error=str(e))
            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[125:136]
==core.health.health_service_orchestrator:[778:789]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=enhanced_metadata,
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            logger.error("connection_pools_health_check_failed", error=str(e))
            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cache_health_checker:[84:95]
==core.health.health_service_orchestrator:[472:483]
                status=HealthStatus.HEALTHY,
                message="Cache hierarchy operational",
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=metrics,
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            logger.error("cache_hierarchy_health_check_failed", error=str(e))
            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[228:241]
==core.health.recovery_manager:[360:371]
            async with pool_manager.acquire_connection("default") as conn:
                # Simple query to test connection
                if hasattr(conn, "execute"):
                    result = await conn.execute("SELECT 1")
                    if hasattr(result, "fetchone"):
                        await result.fetchone()
                elif hasattr(conn, "cursor"):
                    # SQLite case
                    cursor = await conn.cursor()
                    await cursor.execute("SELECT 1")
                    await cursor.fetchone()
                    await cursor.close()
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_utils:[225:247]
==core.health.health_service_orchestrator:[828:838]
            "database": ComponentType.DATABASE,
            "redis": ComponentType.REDIS,
            "cache_hierarchy": ComponentType.CACHE,
            "file_system": ComponentType.FILE_SYSTEM,
            "memory": ComponentType.MEMORY,
            "cpu": ComponentType.CPU,
            "tws_monitor": ComponentType.EXTERNAL_API,
            "connection_pools": ComponentType.CONNECTION_POOL,
            "websocket_pool": ComponentType.CONNECTION_POOL,
        } (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[246:263]
==core.health.health_service_simplified:[427:442]
            response_time = (time.time() - start_time) * 1000
            return ComponentHealth(
                name=component_name,
                component_type=component_type,
                status=HealthStatus.UNHEALTHY,
                message=f"{component_name} check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_database_health_basic(
        self, component_name: str
    ) -> ComponentHealth:
        """Basic database health check via connection pool manager.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[91:103]
==core.health.health_service_simplified:[363:375]
                    last_check=datetime.now(),
                    error_count=1,
                )

                error_result = HealthCheckResult(
                    overall_status=HealthStatus.UNKNOWN,
                    timestamp=datetime.now(),
                    correlation_id=f"health_check_{component_name}_error_{int(time.time())}",
                    components={component_name: error_health},
                    summary={"total_components": 1, "unknown": 1},
                )
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[276:286]
==api.health_simplified:[290:302]
                name=component.name,
                component_type=component.component_type.value,
                status=component.status.value,
                status_color=get_status_color(component.status),
                message=component.message or "",
                response_time_ms=component.response_time_ms,
                last_check=component.last_check.isoformat(),
                error_count=component.error_count,
                metadata=component.metadata,
            ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[204:214]
==api.health_simplified:[204:216]
                        name=component.name,
                        component_type=component.component_type.value,
                        status=component.status.value,
                        status_color=get_status_color(component.status),
                        message=component.message or "",
                        response_time_ms=component.response_time_ms,
                        last_check=component.last_check.isoformat(),
                        error_count=component.error_count,
                        metadata=component.metadata,
                    )

        # Calculate core status (more strict - any unhealthy core component = unhealthy overall) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.connection_monitor:[220:246]
==core.health.monitors.system_monitor:[202:228]
        }

    def get_cached_health(self, component_name: str) -> ComponentHealth | None:
        """
        Get cached health result for a specific component.

        Args:
            component_name: Name of the component (connection_pools or websocket_pool)

        Returns:
            Cached ComponentHealth or None if cache is stale/empty
        """
        if component_name in self._cached_results:
            # Simple cache expiry check (5 minutes)
            age = datetime.now() - self._last_check
            if age and age.total_seconds() < 300:
                return self._cached_results[component_name]
            # Cache expired
            self._cached_results.pop(component_name, None)

        return None

    def clear_cache(self) -> None:
        """Clear all cached health results."""
        self._cached_results.clear()
        self._last_check = None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.cache_monitor:[156:179]
==core.health.monitors.tws_monitor:[144:167]
        )

    def get_cached_health(self) -> ComponentHealth | None:
        """
        Get cached health result if available and recent.

        Returns:
            Cached ComponentHealth or None if cache is stale/empty
        """
        if self._cached_result:
            # Simple cache expiry check (5 minutes)
            age = datetime.now() - self._last_check
            if age.total_seconds() < 300:
                return self._cached_result
            # Cache expired
            self._cached_result = None

        return None

    def clear_cache(self) -> None:
        """Clear the cached health result."""
        self._cached_result = None
        self._last_check = None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.cache_monitor:[141:152]
==core.health.monitors.redis_monitor:[180:191]
                    component_name=component_name,
                    attempt=attempt + 1,
                    max_retries=max_retries,
                    wait_time=wait_time,
                    error=str(e),
                )
                await asyncio.sleep(wait_time)

        # This should never be reached, but just in case
        return ComponentHealth(
            name=component_name, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[71:81]
==core.health.health_checkers.filesystem_health_checker:[66:76]
            response_time = (time.time() - start_time) * 1000

            return ComponentHealth(
                name=self.component_name,
                component_type=self.component_type,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[84:95]
==core.health.health_service_orchestrator:[250:261]
                    status=HealthStatus.UNHEALTHY,
                    message="Database pool statistics unavailable (empty/null)",
                    response_time_ms=response_time,
                    last_check=datetime.now(),
                    metadata={"pool_stats": "empty or null"},
                )

            db_pool_stats = pool_stats.get("database")

            if db_pool_stats is None:
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[151:164]
==core.health.health_service_simplified:[92:105]
        start_time = time.time()
        results = []

        # Define components to check
        components_to_check = [
            "database",
            "redis",
            "cache_hierarchy",
            "system_resources",
            "websocket_pool",
        ]

        # Run checks with semaphore to limit concurrency (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[235:245]
==core.health.health_service_simplified:[416:426]
            response_time = (time.time() - start_time) * 1000
            return ComponentHealth(
                name=component_name,
                component_type=component_type,
                status=HealthStatus.HEALTHY,
                message=f"{component_name} basic check passed",
                response_time_ms=response_time,
                last_check=datetime.now(),
            )
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[130:145]
==core.health.health_service_simplified:[184:198]
        }

        component_name = component_name_map.get(component_type)
        if not component_name:
            raise ValueError(f"Unsupported component type: {component_type}")

        # Check cache first (5 minutes expiry)
        cached_health = self._component_cache.get(component_name)
        if cached_health:
            age = datetime.now() - cached_health.last_check
            if age.total_seconds() < 300:
                return cached_health

        # Perform fresh health check (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[344:356]
==core.health.health_service_orchestrator:[822:834]
                last_check=datetime.now(),
            )

    def _get_component_type(self, name: str) -> ComponentType:
        """Get component type for a given component name."""
        mapping = {
            "database": ComponentType.DATABASE,
            "redis": ComponentType.REDIS,
            "cache_hierarchy": ComponentType.CACHE,
            "file_system": ComponentType.FILE_SYSTEM,
            "memory": ComponentType.MEMORY,
            "cpu": ComponentType.CPU, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.circuit_breaker:[129:138]
==core.monitoring.circuit_breaker:[63:72]
            "state": self.state,
            "failure_count": self.failure_count,
            "failure_threshold": self.failure_threshold,
            "recovery_timeout": self.recovery_timeout,
            "last_failure_time": (
                self.last_failure_time.isoformat()
                if self.last_failure_time
                else None
            ), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[897:908]
==utils.exceptions:[876:887]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[876:887]
==utils.exceptions:[897:908]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[802:813]
==utils.exceptions:[775:786]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[775:786]
==utils.exceptions:[802:813]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[728:739]
==utils.exceptions:[403:414]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[403:414]
==utils.exceptions:[728:739]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1004:1015]
==utils.exceptions:[215:226]
        super().__init__(
            message=message,
            error_code=ErrorCode.VALIDATION_ERROR,
            status_code=400,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[215:226]
==utils.exceptions:[1004:1015]
        super().__init__(
            message=message,
            error_code=ErrorCode.VALIDATION_ERROR,
            status_code=400,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[647:662]
==api.health_simplified:[549:564]
        },
        {
            "name": "websocket_pool",
            "type": ComponentType.WEBSOCKET.value,
            "description": "WebSocket connection pools",
        },
    ]

    return {"components": components}


@router.on_event("shutdown")
async def shutdown_health_service():
    """Shutdown simplified health service on application shutdown."""
    try: (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[382:404]
==api.health_simplified:[435:457]
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail={
                "status": "not_ready",
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
            },
        ) from e


@router.get("/live")
async def liveness_probe() -> dict[str, Any]:
    """
    Kubernetes liveness probe endpoint.

    Returns 503 Service Unavailable if the health check system itself is failing,
    200 OK if the system is alive and responding.

    Returns:
        dict[str, Any]: Liveness status
    """
    try: (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[44:57]
==core.health.health_checkers.database_health_checker:[44:57]
        start_time = time.time()

        try:
            from resync.core.connection_manager import (
                get_connection_pool_manager,
            )

            pool_manager = get_connection_pool_manager()
            if not pool_manager:
                return ComponentHealth(
                    name=self.component_name,
                    component_type=self.component_type,
                    status=HealthStatus.UNKNOWN, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cache_health_checker:[84:93]
==core.health.monitors.cache_monitor:[88:99]
                status=HealthStatus.HEALTHY,
                message="Cache hierarchy operational",
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=metrics,
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[793:806]
==core.health.monitors.tws_monitor:[88:115]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_websocket_pool_health(self) -> ComponentHealth:
        """Check websocket pool health."""
        start_time = time.time()

        try:
            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[776:785]
==core.health.monitors.connection_monitor:[120:130]
                name="connection_pools",
                component_type=ComponentType.CONNECTION_POOL,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=enhanced_metadata,
            )

            # Cache the result (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[76:84]
==core.health.health_service_orchestrator:[628:636]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "cpu_usage_percent": cpu_percent,
                    "cpu_samples": [round(s, 1) for s in cpu_samples],
                    "cpu_count": psutil.cpu_count(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[56:67]
==core.health.health_service_orchestrator:[709:720]
                    status=HealthStatus.UNKNOWN,
                    message="Connection pool manager not available",
                    last_check=datetime.now(),
                )

            # Check pool status
            pool_stats = pool_manager.get_pool_stats()

            if not pool_stats:
                response_time = (time.time() - start_time) * 1000
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[895:908]
==core.health.refactored_health_service_orchestrator:[279:290]
                    )
                    usage = comp.metadata["connection_usage_percent"]
                    alerts.append(
                        f"Database connection pool usage at {usage:.1f}% (threshold: {threshold}%)"
                    )
                else:
                    alerts.append(f"{name} is degraded")
        return alerts

    async def get_component_health(
        self, component_name: str
    ) -> ComponentHealth | None:
        """Get the current health status of a specific component.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_utils:[134:143]
==core.health.health_service_facade:[195:205]
                    if component.status == HealthStatus.HEALTHY:
                        summary["healthy"] += 1
                    elif component.status == HealthStatus.DEGRADED:
                        summary["degraded"] += 1
                    elif component.status == HealthStatus.UNHEALTHY:
                        summary["unhealthy"] += 1
                    else:
                        summary["unknown"] += 1

            # Calculate overall status (worst status wins) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[89:98]
==core.health.refactored_health_check_service:[105:114]
                    status=HealthStatus.UNKNOWN,
                    message=f"Health check failed: {str(e)}",
                    last_check=datetime.now(),
                    error_count=1,
                )

                error_result = HealthCheckResult(
                    overall_status=HealthStatus.UNKNOWN,
                    timestamp=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_alerting:[56:65]
==core.health.health_service_orchestrator:[883:892]
        for name, comp in components.items():
            if comp.status == HealthStatus.UNHEALTHY:
                alerts.append(f"{name} is unhealthy")
            elif comp.status == HealthStatus.DEGRADED:
                # Include specific threshold breach information in alerts
                if (
                    name == "database"
                    and "connection_usage_percent" in comp.metadata
                ): (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[770:786]
==utils.exceptions:[723:739]
        if details is None:
            details = {}
        if agent_id:
            details["agent_id"] = agent_id

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[723:739]
==utils.exceptions:[770:786]
        if details is None:
            details = {}
        if agent_id:
            details["agent_id"] = agent_id

        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1197:1208]
==utils.exceptions:[1157:1168]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1157:1168]
==utils.exceptions:[1197:1208]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.WARNING,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.__init__:[145:154]
==api.validation.files:[635:643]
    "FileUploadRequest",
    "FileChunkUploadRequest",
    "FileUpdateRequest",
    "FileProcessingRequest",
    "RAGUploadRequest",
    "FileInfo",
    "FileType",
    "ProcessingStatus",
    # Monitoring validation models (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[445:467]
==api.health_simplified:[478:497]
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail={
                "status": "dead",
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
            },
        ) from e


@router.get("/metrics")
async def get_prometheus_metrics():
    """
    Get Prometheus metrics for health checks.

    Returns:
        Prometheus metrics in text format
    """
    try: (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.cache_monitor:[132:140]
==core.health.monitors.redis_monitor:[171:179]
                        component_name=component_name,
                        max_retries=max_retries,
                        error=str(e),
                    )
                    raise

                wait_time = 2**attempt  # 1s, 2s, 4s
                logger.warning( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[146:153]
==core.health.health_checkers.filesystem_health_checker:[68:75]
            return ComponentHealth(
                name=self.component_name,
                component_type=self.component_type,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[140:153]
==core.health.health_checkers.websocket_pool_health_checker:[69:82]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on connection pool exception type."""
        return ComponentType.CONNECTION_POOL

    def get_component_config(self) -> dict[str, Any]:
        """Get connection pools-specific configuration."""
        return {
            "timeout_seconds": self.config.timeout_seconds, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[122:129]
==core.health.health_checkers.cpu_health_checker:[73:80]
            return ComponentHealth(
                name=self.component_name,
                component_type=self.component_type,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.refactored_health_check_service:[44:52]
==core.health.refactored_health_service_orchestrator:[44:52]
        self.config_manager = EnhancedHealthConfigurationManager(
            config or HealthCheckConfig()
        )
        self.checker_factory = HealthCheckerFactory(
            self.config_manager.get_config()
        )
        self.config_manager.set_health_checker_factory(self.checker_factory)
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[793:805]
==core.health.monitors.connection_monitor:[145:173]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def check_websocket_pool_health(self) -> ComponentHealth:
        """
        Check WebSocket pool health.

        Returns:
            ComponentHealth: WebSocket pool health status
        """
        start_time = time.time()

        try:
            # Check if connection manager exists and is active
            # This is a simplified check - in a real implementation, we'd track actual WebSocket connections
            # For now we'll assume if we can access the ConnectionManager, it's functional
            # But we'll check if there's an active instance

            # For a real implementation, we'd need to check the actual WebSocket connection pool
            # For now, we'll consider it as degraded if no connections have been made recently,
            # or healthy if it's available

            response_time = (time.time() - start_time) * 1000

            # We assume the WebSocket system is available if the chat module is loaded
            # In a real system, we'd track actual connection counts and other metrics (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.memory_health_checker:[77:85]
==core.health.health_service_orchestrator:[578:586]
                    "memory_total_gb": memory.total / (1024**3),
                },
            )

        except Exception as e:
            response_time = (time.time() - start_time) * 1000
            logger.error("memory_health_check_failed", error=str(e))
            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.memory_health_checker:[69:76]
==core.health.health_service_orchestrator:[571:578]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "memory_usage_percent": memory_usage_percent,
                    "memory_available_gb": memory.available / (1024**3), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.filesystem_health_checker:[71:78]
==core.health.health_service_orchestrator:[521:528]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "disk_usage_percent": disk_usage_percent,
                    "disk_free_gb": disk_usage.free / (1024**3), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[132:142]
==core.health.health_service_simplified:[73:83]
            interval_seconds=self._check_interval,
        )

    async def stop_monitoring(self) -> None:
        """Stop background health monitoring."""
        self._is_monitoring = False
        if self._monitoring_task:
            self._monitoring_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await self._monitoring_task (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[350:357]
==core.health.health_service_facade:[281:289]
                "database": ComponentType.DATABASE,
                "redis": ComponentType.REDIS,
                "cache_hierarchy": ComponentType.CACHE,
                "file_system": ComponentType.FILE_SYSTEM,
                "memory": ComponentType.MEMORY,
                "cpu": ComponentType.CPU,
            }
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_retry:[70:79]
==core.health.health_check_utils:[75:82]
                    component_name=component_name,
                    attempt=attempt + 1,
                    max_retries=max_retries,
                    wait_time=wait_time,
                    error=str(e),
                )
                await asyncio.sleep(wait_time) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.circuit_breaker:[97:107]
==core.health.health_service_consolidated:[68:76]
            return result
        except Exception as e:
            self.failure_count += 1
            self.last_failure_time = datetime.now()
            # If we've exceeded threshold, open circuit
            if self.failure_count >= self.failure_threshold:
                self.state = "open"
                logger.warning( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[851:858]
==utils.exceptions:[824:831]
        super().__init__(
            message=message,
            tool_name=tool_name,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[824:831]
==utils.exceptions:[851:858]
        super().__init__(
            message=message,
            tool_name=tool_name,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[598:605]
==utils.exceptions:[577:584]
        super().__init__(
            message=message,
            config_key=config_key,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[577:584]
==utils.exceptions:[598:605]
        super().__init__(
            message=message,
            config_key=config_key,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.__init__:[154:161]
==api.validation.monitoring:[600:607]
    "SystemMetricRequest",
    "CustomMetricRequest",
    "AlertRequest",
    "AlertQueryParams",
    "HealthCheckRequest",
    "LogQueryParams",
    "PerformanceTestRequest", (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.monitoring:[473:480]
==api.validation.query_params:[413:420]
        Annotated[
            str,
            StringConstraints(
                min_length=1, max_length=200, strip_whitespace=True
            ),
        ]
        | None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.chat:[321:328]
==api.validation.files:[331:338]
        Annotated[
            str,
            StringConstraints(
                min_length=1, max_length=100, strip_whitespace=True
            ),
        ]
        | None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.agents:[417:431]
==api.validation.query_params:[385:399]
    )

    model_config = ConfigDict(
        extra="forbid",
    )

    @field_validator("tags")
    @classmethod
    def validate_tags(cls, v):
        """Validate tags list."""
        if not v:
            return v
        # Check for duplicate tags
        if len(v) != len(set(v)): (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[368:379]
==api.health_simplified:[420:430]
        }

        if not ready:
            # Return 503 Service Unavailable if not ready
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=response_data,
            )

        return response_data
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[193:202]
==api.health_simplified:[216:225]
        core_status = HealthStatus.HEALTHY
        for component in core_components.values():
            if component.status == HealthStatus.UNHEALTHY:
                core_status = HealthStatus.UNHEALTHY
                break
            if component.status == HealthStatus.DEGRADED:
                core_status = HealthStatus.DEGRADED

        # Generate core summary (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.pools.base_pool:[80:88]
==core.pools.pool_manager:[91:101]
        if self._initialized or self._shutdown:
            return

        async with self._lock:
            if self._initialized:
                return

            try:
                # Initialize database connection pool
                # Handle missing settings gracefully for testing (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.monitors.cache_monitor:[107:127]
==core.health.monitors.redis_monitor:[146:166]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def check_redis_health_with_retry(
        self, max_retries: int = 3, component_name: str = "redis"
    ) -> ComponentHealth:
        """
        Execute Redis health check with retry logic and exponential backoff.

        Args:
            max_retries: Maximum number of retry attempts
            component_name: Name of the component for logging

        Returns:
            ComponentHealth: Redis health status after retries
        """
        for attempt in range(max_retries):
            try: (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.websocket_pool_health_checker:[67:76]
==core.health.monitors.connection_monitor:[197:211]
                status=HealthStatus.UNHEALTHY,
                message=f"WebSocket pool unavailable: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on WebSocket pool exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.tws_monitor_health_checker:[66:72]
==core.health.monitors.tws_monitor:[66:72]
                status=HealthStatus.HEALTHY,
                message="TWS monitor connectivity test successful",
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "tws_enabled": tws_config.get("enabled", False), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[107:113]
==core.health.health_checkers.memory_health_checker:[100:106]
        return {
            "timeout_seconds": self.config.timeout_seconds,
            "retry_attempts": 1,
            "warning_percent": 85,
            "critical_percent": 95,
        } (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[125:132]
==core.health.monitors.connection_monitor:[122:130]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata=enhanced_metadata,
            )
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_simplified:[128:135]
==core.health.refactored_health_check_service:[107:114]
                    last_check=datetime.now(),
                    error_count=1,
                )

                error_result = HealthCheckResult(
                    overall_status=HealthStatus.UNKNOWN,
                    timestamp=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[487:500]
==core.health.monitors.tws_monitor:[88:112]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def check_external_api_health(
        self, api_name: str, endpoint: str | None = None
    ) -> ComponentHealth:
        """
        Check health of external API services.

        Args:
            api_name: Name of the API service
            endpoint: Optional endpoint URL for health checking

        Returns:
            ComponentHealth: External API health status
        """
        start_time = time.time()

        try:
            # Basic external API health check
            # In a real implementation, this would make actual HTTP requests
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[626:636]
==core.health.monitors.system_monitor:[147:157]
                name="cpu",
                component_type=ComponentType.CPU,
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={
                    "cpu_usage_percent": cpu_percent,
                    "cpu_samples": [round(s, 1) for s in cpu_samples],
                    "cpu_count": psutil.cpu_count(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[425:439]
==core.health.monitors.system_monitor:[103:119]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_cache_health(self) -> ComponentHealth:
        """Check cache hierarchy health."""
        start_time = time.time()

        try:
            # Import and test the actual cache implementation
            from resync_new.core.cache import AsyncTTLCache

            # Create a test cache instance to verify functionality (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[806:812]
==core.health.monitors.connection_monitor:[174:180]
                name="websocket_pool",
                component_type=ComponentType.CONNECTION_POOL,
                status=HealthStatus.HEALTHY,
                message="WebSocket pool service available",
                response_time_ms=response_time,
                last_check=datetime.now(), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[331:344]
==core.health.monitors.connection_monitor:[145:169]
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_redis_health(self) -> ComponentHealth:
        """Check Redis cache health and connectivity."""
        start_time = time.time()

        try:
            # Check Redis configuration
            from resync_new.config.settings import settings
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.tws_monitor_health_checker:[82:91]
==core.health.health_service_orchestrator:[688:697]
                status=HealthStatus.UNHEALTHY,
                message=f"TWS monitor connectivity failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on TWS monitor exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.tws_monitor_health_checker:[55:64]
==core.health.health_service_orchestrator:[665:674]
                    status=HealthStatus.UNKNOWN,
                    message="TWS monitor not configured",
                    last_check=datetime.now(),
                )

            # Simple connectivity test
            response_time = (time.time() - start_time) * 1000

            return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.redis_health_checker:[129:138]
==core.health.health_service_orchestrator:[423:432]
                status=HealthStatus.UNHEALTHY,
                message=f"Redis check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on Redis exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.memory_health_checker:[87:96]
==core.health.health_service_orchestrator:[588:597]
                status=HealthStatus.UNKNOWN,
                message=f"Memory check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_cpu_health(self) -> ComponentHealth:
        """Check CPU load monitoring.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.filesystem_health_checker:[89:98]
==core.health.health_service_orchestrator:[537:546]
                status=HealthStatus.UNKNOWN,
                message=f"File system check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on filesystem exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[163:174]
==core.health.health_service_orchestrator:[329:338]
                status=HealthStatus.UNHEALTHY,
                message=f"Database connection failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on database exception type."""
        # For database errors, we typically want to mark as UNHEALTHY
        # since database connectivity issues are critical (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[94:103]
==core.health.health_service_orchestrator:[645:654]
                status=HealthStatus.UNKNOWN,
                message=f"CPU check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    async def _check_tws_monitor_health(self) -> ComponentHealth:
        """Check TWS monitor health (external API service).""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[138:147]
==core.health.health_service_orchestrator:[791:800]
                status=HealthStatus.UNHEALTHY,
                message=f"Connection pools check failed: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on connection pool exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cache_health_checker:[97:106]
==core.health.health_service_orchestrator:[485:494]
                status=HealthStatus.DEGRADED,
                message=f"Cache hierarchy issues: {str(e)}",
                response_time_ms=response_time,
                last_check=datetime.now(),
                error_count=1,
            )

    def _get_status_for_exception(self, exception: Exception) -> ComponentType:
        """Determine health status based on cache exception type.""" (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_facade:[281:287]
==core.health.health_service_orchestrator:[828:834]
                "database": ComponentType.DATABASE,
                "redis": ComponentType.REDIS,
                "cache_hierarchy": ComponentType.CACHE,
                "file_system": ComponentType.FILE_SYSTEM,
                "memory": ComponentType.MEMORY,
                "cpu": ComponentType.CPU, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_facade:[183:190]
==core.health.health_service_orchestrator:[861:867]
            summary = {
                "healthy": 0,
                "degraded": 0,
                "unhealthy": 0,
                "unknown": 0,
            }
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[529:538]
==core.health.health_service_simplified:[265:271]
        while self._is_monitoring:
            try:
                # Run health checks
                await self.run_all_checks()

                # Sleep until next check
                await asyncio.sleep(self._check_interval)
            except asyncio.CancelledError:
                break (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_utils:[98:105]
==core.health.health_service_orchestrator:[845:851]
        priority = {
            HealthStatus.UNHEALTHY: 3,
            HealthStatus.DEGRADED: 2,
            HealthStatus.UNKNOWN: 1,
            HealthStatus.HEALTHY: 0,
        } (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[38:44]
==core.health.health_config_manager:[457:463]
            "database",
            "redis",
            "cache_hierarchy",
            "file_system",
            "memory",
            "cpu", (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[350:356]
==core.health.health_check_utils:[225:231]
            "database": ComponentType.DATABASE,
            "redis": ComponentType.REDIS,
            "cache_hierarchy": ComponentType.CACHE,
            "file_system": ComponentType.FILE_SYSTEM,
            "memory": ComponentType.MEMORY,
            "cpu": ComponentType.CPU, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_alerting:[123:137]
==core.health.memory_manager:[233:252]
            if entry["timestamp"] >= cutoff_time
        ]

        # Sort by timestamp (most recent first)
        filtered_history.sort(key=lambda x: x["timestamp"], reverse=True)

        # Apply limit if specified
        if limit:
            filtered_history = filtered_history[:limit]

        return filtered_history

    async def force_memory_cleanup(self) -> dict[str, any]:
        """
        Force immediate memory cleanup.

        Returns:
            Dictionary with cleanup results
        """ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_alerting:[66:74]
==core.health.health_service_orchestrator:[896:902]
                    usage = comp.metadata["connection_usage_percent"]
                    alerts.append(
                        f"Database connection pool usage at {usage:.1f}% (threshold: {threshold}%)"
                    )
                else:
                    alerts.append(f"{name} is degraded")

        # Store alerts in history (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.circuit_breaker:[84:92]
==core.health.health_service_consolidated:[60:68]
                )

        try:
            result = await func(*args, **kwargs)
            # On success, reset if we were in half-open state
            if self.state == "half-open":
                self.state = "closed"
                self.failure_count = 0 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[703:709]
==utils.exceptions:[678:684]
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[678:684]
==utils.exceptions:[703:709]
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[659:665]
==utils.exceptions:[639:645]
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[639:645]
==utils.exceptions:[659:665]
        super().__init__(
            message=message,
            details=details,
            correlation_id=correlation_id,
            original_exception=original_exception,
        ) (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[698:705]
==utils.exceptions:[518:525]
        if details is None:
            details = {}
        if timeout_seconds:
            details["timeout_seconds"] = timeout_seconds

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[518:525]
==utils.exceptions:[698:705]
        if details is None:
            details = {}
        if timeout_seconds:
            details["timeout_seconds"] = timeout_seconds

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[488:495]
==utils.exceptions:[428:435]
        if details is None:
            details = {}
        if service_name:
            details["service_name"] = service_name

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[428:435]
==utils.exceptions:[488:495]
        if details is None:
            details = {}
        if service_name:
            details["service_name"] = service_name

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1106:1114]
==utils.exceptions:[879:887]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1079:1087]
==utils.exceptions:[805:813]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[954:962]
==utils.exceptions:[778:786]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[927:935]
==utils.exceptions:[731:739]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[879:887]
==utils.exceptions:[1106:1114]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[805:813]
==utils.exceptions:[1079:1087]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[778:786]
==utils.exceptions:[954:962]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[731:739]
==utils.exceptions:[927:935]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[621:629]
==utils.exceptions:[406:414]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[406:414]
==utils.exceptions:[621:629]
            status_code=500,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1197:1203]
==utils.exceptions:[728:734]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1157:1163]
==utils.exceptions:[403:409]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[728:734]
==utils.exceptions:[1197:1203]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[403:409]
==utils.exceptions:[1157:1163]
        super().__init__(
            message=message,
            error_code=ErrorCode.INTERNAL_ERROR,
            status_code=500,
            details=details,
            correlation_id=correlation_id, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[458:465]
==utils.exceptions:[369:376]
        if details is None:
            details = {}
        if retry_after:
            details["retry_after"] = retry_after

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[369:376]
==utils.exceptions:[458:465]
        if details is None:
            details = {}
        if retry_after:
            details["retry_after"] = retry_after

        super().__init__(
            message=message, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.pools.base_pool:[109:116]
==core.pools.pool_manager:[218:225]
        if not self._initialized or self._shutdown:
            return

        async with self._lock:
            if self._shutdown:
                return
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.websocket_pool_health_checker:[52:57]
==core.health.monitors.connection_monitor:[176:181]
                status=HealthStatus.HEALTHY,
                message="WebSocket pool service available",
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.tws_monitor_health_checker:[61:67]
==core.health.health_checkers.websocket_pool_health_checker:[47:53]
            response_time = (time.time() - start_time) * 1000

            return ComponentHealth(
                name=self.component_name,
                component_type=self.component_type,
                status=HealthStatus.HEALTHY, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cache_health_checker:[79:85]
==core.health.health_checkers.redis_health_checker:[82:88]
                response_time = (time.time() - start_time) * 1000

                return ComponentHealth(
                    name=self.component_name,
                    component_type=self.component_type,
                    status=HealthStatus.HEALTHY, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[684:689]
==core.health.monitors.tws_monitor:[82:87]
            logger.error("tws_monitor_health_check_failed", error=str(e))
            return ComponentHealth(
                name="tws_monitor",
                component_type=ComponentType.EXTERNAL_API,
                status=HealthStatus.UNHEALTHY, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[641:646]
==core.health.monitors.system_monitor:[175:180]
            logger.error("cpu_health_check_failed", error=str(e))
            return ComponentHealth(
                name="cpu",
                component_type=ComponentType.CPU,
                status=HealthStatus.UNKNOWN, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[584:589]
==core.health.monitors.system_monitor:[97:102]
            logger.error("memory_health_check_failed", error=str(e))
            return ComponentHealth(
                name="memory",
                component_type=ComponentType.MEMORY,
                status=HealthStatus.UNKNOWN, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[419:424]
==core.health.monitors.redis_monitor:[140:145]
            logger.error("redis_health_check_failed", error=str(e))
            return ComponentHealth(
                name="redis",
                component_type=ComponentType.REDIS,
                status=HealthStatus.UNHEALTHY, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[787:792]
==core.health.monitors.connection_monitor:[139:144]
            logger.error("connection_pools_health_check_failed", error=str(e))
            return ComponentHealth(
                name="connection_pools",
                component_type=ComponentType.CONNECTION_POOL,
                status=HealthStatus.UNHEALTHY, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[481:486]
==core.health.monitors.cache_monitor:[101:106]
            logger.error("cache_hierarchy_health_check_failed", error=str(e))
            return ComponentHealth(
                name="cache_hierarchy",
                component_type=ComponentType.CACHE,
                status=HealthStatus.DEGRADED, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.tws_monitor_health_checker:[44:53]
==core.health.health_service_orchestrator:[654:663]
        start_time = time.time()

        try:
            # Check TWS configuration
            from resync_new.config.settings import settings

            tws_config = settings.get("tws_monitor", {})
            if not tws_config or not tws_config.get("enabled", False):
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.memory_health_checker:[69:74]
==core.health.health_service_orchestrator:[628:633]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.filesystem_health_checker:[71:76]
==core.health.health_service_orchestrator:[571:576]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.database_health_checker:[44:54]
==core.health.health_service_orchestrator:[697:707]
        start_time = time.time()

        try:
            from resync.core.connection_manager import (
                get_connection_pool_manager,
            )

            pool_manager = get_connection_pool_manager()
            if not pool_manager:
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.cpu_health_checker:[76:81]
==core.health.health_service_orchestrator:[521:526]
                status=status,
                message=message,
                response_time_ms=response_time,
                last_check=datetime.now(),
                metadata={ (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_checkers.connection_pools_health_checker:[44:54]
==core.health.health_service_orchestrator:[210:220]
        start_time = time.time()

        try:
            from resync.core.connection_manager import (
                get_connection_pool_manager,
            )

            pool_manager = get_connection_pool_manager()
            if not pool_manager:
                return ComponentHealth( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_orchestrator:[908:919]
==core.health.refactored_health_service_orchestrator:[313:327]
        async with self._lock:
            return self._component_results.get(component_name)

    async def get_all_component_health(self) -> dict[str, ComponentHealth]:
        """Get all current component health results."""
        async with self._lock:
            return self._component_results.copy()

    def get_last_check_time(self) -> datetime | None:
        """Get the timestamp of the last health check."""
        return self.last_health_check (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_service_consolidated:[125:131]
==core.health.health_service_simplified:[66:72]
        if self._is_monitoring:
            return

        self._is_monitoring = True
        self._monitoring_task = asyncio.create_task(self._monitoring_loop())
        logger.info( (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_monitoring_coordinator:[59:64]
==core.health.memory_usage_tracker:[71:76]
        if self._monitoring_task:
            self._monitoring_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await self._monitoring_task
            self._monitoring_task = None (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_monitoring_coordinator:[58:63]
==core.health.health_service_consolidated:[137:142]
        self._is_monitoring = False
        if self._monitoring_task:
            self._monitoring_task.cancel()
            with contextlib.suppress(asyncio.CancelledError):
                await self._monitoring_task (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[105:127]
==core.health.health_service_simplified:[158:180]
        return results

    async def get_component_health(
        self, component_type: ComponentType
    ) -> ComponentHealth:
        """
        Get health status for a specific component type.

        Args:
            component_type: The type of component to check

        Returns:
            ComponentHealth: Health status of the component

        Raises:
            ValueError: If component type is not supported
        """
        # Map component type to component name
        component_name_map = {
            ComponentType.DATABASE: "database",
            ComponentType.REDIS: "redis",
            ComponentType.CACHE: "cache_hierarchy", (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_check_service:[34:41]
==core.health.health_service_consolidated:[152:159]
        results = []

        # Define the components to check
        components_to_check = [
            "database",
            "redis",
            "cache_hierarchy", (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.health_alerting:[191:196]
==core.health.health_check_utils:[125:130]
        summary: dict[str, int] = {
            "healthy": 0,
            "degraded": 0,
            "unhealthy": 0,
            "unknown": 0, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.health.circuit_breaker_manager:[143:148]
==core.health.proactive_monitor:[240:245]
                        "state": stats.get("state", "unknown"),
                        "failures": stats.get("failures", 0),
                        "successes": stats.get("successes", 0),
                        "error_rate": stats.get("failure_rate", 0),
                        "last_failure": stats.get("last_failure_time"), (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.cache.memory_manager:[16:26]
==core.cache.strategies:[24:36]
logger = logging.getLogger(__name__)


class CacheEntry:
    """Represents a single entry in the cache with timestamp and TTL."""

    def __init__(self, data: Any, timestamp: float, ttl: float):
        self.data = data
        self.timestamp = timestamp
        self.ttl = ttl (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[496:504]
==utils.exceptions:[466:474]
            status_code=503,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[466:474]
==utils.exceptions:[496:504]
            status_code=503,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[1032:1040]
==utils.exceptions:[436:444]
            status_code=502,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==core.exceptions:[436:444]
==utils.exceptions:[1032:1040]
            status_code=502,
            details=details,
            correlation_id=correlation_id,
            severity=ErrorSeverity.ERROR,
            original_exception=original_exception,
        )

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.__init__:[166:172]
==api.validation.middleware:[564:569]
    "ValidationMiddleware",
    "ValidationConfig",
    "create_validation_middleware",
    "validate_json_body",
    "validate_query_params",
    # Configuration (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.validation.common:[259:268]
==api.validation.config:[19:28]
class SanitizationLevel(str, Enum):
    """Input sanitization levels."""

    STRICT = "strict"
    MODERATE = "moderate"
    PERMISSIVE = "permissive"
    NONE = "none"

 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.middleware.endpoint_utils:[29:35]
==core.rate_limiter:[131:137]
            request = None
            for arg in args:
                if isinstance(arg, Request):
                    request = arg
                    break
 (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.middleware.cors_config:[319:324]
==api.middleware.cors_middleware:[305:310]
            environment=Environment.TEST,
            allowed_origins=["http://localhost:3000", "http://localhost:8000"],
            allow_all_origins=False,
            allow_credentials=True,
            log_violations=True, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.middleware.cors_config:[296:301]
==api.middleware.cors_middleware:[268:273]
        environment=Environment.DEVELOPMENT,
        allowed_origins=["*"],
        allow_all_origins=True,
        allow_credentials=True,
        log_violations=True, (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[320:338]
==api.health_simplified:[366:384]
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Detailed health check system error: {str(e)}",
        ) from e


@router.get("/ready")
async def readiness_probe() -> dict[str, Any]:
    """
    Kubernetes readiness probe endpoint.

    Returns 503 Service Unavailable if core components are unhealthy,
    200 OK if system is ready to serve requests.

    Returns:
        dict[str, Any]: Readiness status with core component details
    """
    try: (duplicate-code)
resync\utils\__init__.py:1:0: R0801: Similar lines in 2 files
==api.health:[242:268]
==api.health_simplified:[249:275]
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail=f"Core health check system error: {str(e)}",
        ) from e


@router.get("/detailed", response_model=DetailedHealthResponse)
async def get_detailed_health(
    include_history: bool = Query(
        False, description="Include health history in response"
    ),
    history_hours: int = Query(
        24, description="Hours of history to include", ge=1, le=168
    ),
) -> DetailedHealthResponse:
    """
    Get detailed health check with all components and optional history.

    Args:
        include_history: Whether to include historical health data
        history_hours: Number of hours of history to include (1-168)

    Returns:
        DetailedHealthResponse: Comprehensive health status with all components
    """
    try: (duplicate-code)

------------------------------------------------------------------
Your code has been rated at 8.14/10 (previous run: 8.14/10, +0.00)

